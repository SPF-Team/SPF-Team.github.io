<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://incorporated.sendtoinc.com</link>
    <atom:link href="http://incorporated.sendtoinc.com/feed.xml" rel="self" type="application/rss+xml" />
    <description></description>
    <language>en-us</language>
    <pubDate>Mon, 16 Jun 2014 11:26:34 +0000</pubDate>
    <lastBuildDate>Mon, 16 Jun 2014 11:26:34 +0000</lastBuildDate>

    
    
    <item>
      <title>深入理解z-index</title>
      <link>http://incorporated.sendtoinc.com/2014/06/15/understanding-z-index/</link>
      <pubDate>Sun, 15 Jun 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://incorporated.sendtoinc.com/2014/06/15/understanding-z-index</guid>
      <description>&lt;h2 id=&quot;&quot;&gt;要解决的问题&lt;/h2&gt;

&lt;p&gt;在页面编写的过程中，经常需要处理元素的重叠。重叠的顺序不当则容易造成元素被错误地遮盖等现象。一般地，有很多人认为只需要指定元素的z-index即可调整重叠的顺序，但是实际上并不是这样的。&lt;/p&gt;

&lt;h2 id=&quot;_2&quot;&gt;目录&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#重新理解页面维度&quot;&gt;重新理解页面维度&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#默认重叠&quot;&gt;默认重叠&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#Stacking-Context&quot;&gt;Stacking-Context&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#什么样的元素是一个Stacking-Context&quot;&gt;什么样的元素是一个Stacking-Context&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#多个Stacking-Context之间的重叠&quot;&gt;多个Stacking-Context之间的重叠&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id='重新理解页面维度' /&gt;
&lt;h2 id=&quot;_3&quot;&gt;重新理解页面维度&lt;/h2&gt;

&lt;p&gt;当我们打开一个网页，我们会看到一个二维的世界。在这个二维的世界里，页面里的box（盒子）各有自己的x坐标和y坐标。比如，在下图所示的页面结构里面，有四个&lt;code&gt;div&lt;/code&gt;元素。它们分别具有自己的宽和高，而每个box左上角的x和y坐标就分别是这个box在页面中的x和y坐标。因而，在我们直观的感知里，页面是二维的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw690/6aadf779gw1eheltpc2g7j211q0t075u.jpg&quot; alt=&quot;2D页面的世界&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然而，页面实际上还有第三个维度。垂直于x轴与y轴的方向，存在一个c轴。c轴的正方向指向用户。对于一个页面上的box，它一定有一个c坐标。&lt;strong&gt;注意，此处的c坐标并不是z-index。下图中的坐标名有误，z应该是c。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/6aadf779gw1eheltpv2fij209x06ojrb.jpg&quot; alt=&quot;3D页面的世界&quot; /&gt;&lt;/p&gt;

&lt;p&gt;两个重叠的box最能证明这第三个维度的存在，如果页面上有两个元素是重叠的，那么浏览器的渲染引擎必须决定哪一个box的重叠部分要被放在前面。决定的方法很简单，就是直接比较这两个元素的c坐标。c坐标大的那一个，就被渲染在前面；反之，则被压在下面。&lt;/p&gt;

&lt;p&gt;你不能把c坐标的大小理解成离用户的远近，因为如果那样理解，那么应该有“近大远小”现象。然而事实上，c坐标大的box并不会变小，只是被浏览器渲染在c坐标小的box前面而已。就好像在现实生活中，我们把两张卡片叠在一起，它们会有上下之分，但是看起来两张卡片的大小并不会有所改变（因为它们足够薄且小）。会产生近大远小现象的应该是z坐标，学过一点空间几何的人都应该熟悉。这也是我称这个维度为c坐标而非z坐标的原因。&lt;/p&gt;

&lt;p&gt;下面我们一起来探究一下页面box之间是如何重叠的，换句话说，浏览器是怎么决定一个box的c坐标的。&lt;/p&gt;
&lt;div id='默认重叠' /&gt;
&lt;h2 id=&quot;_4&quot;&gt;默认重叠&lt;/h2&gt;

&lt;p&gt;对于重叠的元素，浏览器默认会按下面的顺序重叠。编号越大的box类型，所拥有的c坐标就越大，因此排在前面。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;正常流当中的block level的box&lt;/li&gt;

&lt;li&gt;浮动的元素&lt;/li&gt;

&lt;li&gt;正常流当中inline level或者inline-block level的box&lt;/li&gt;

&lt;li&gt;&lt;code&gt;position&lt;/code&gt;值不是&lt;code&gt;static&lt;/code&gt;（非正常流中）的box&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这里并不是完整的列表，因为我略去了一些后面才会提到的内容。下面是一个示例：&lt;/p&gt;
&lt;p class='codepen' data-default-tab='result' data-height='268' data-slug-hash='sLrKt' data-theme-id='0'&gt;See the Pen &lt;a href='http://codepen.io/tjwudi/pen/sLrKt/'&gt;sLrKt&lt;/a&gt; by John Wu (&lt;a href='http://codepen.io/tjwudi'&gt;@tjwudi&lt;/a&gt;) on &lt;a href='http://codepen.io'&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;script async='async' src='//codepen.io/assets/embed/ei.js'&gt;&lt;![CDATA[]]&gt;&lt;/script&gt;
&lt;p&gt;可以看到，上述四种不同类型的box中，具有最大c坐标的是第4种，它能够覆盖其他所有三种元素。&lt;/p&gt;

&lt;p&gt;你需要注意的一点是，不要用DOM树的结构来理解重叠。DOM树中下一级的box完全可以重叠在上一级box之上。这都和Stacking Context有关，我们接下来就详细解释一下。&lt;/p&gt;
&lt;div id='Stacking-Context' /&gt;
&lt;h2 id=&quot;stackingcontext&quot;&gt;Stacking-Context&lt;/h2&gt;

&lt;p&gt;上述四种box类型的重叠规律，当且仅当这些box在同一个Stacking Context的时候生效。不同Stacking Context中的box之间的重叠在下面会提到。&lt;/p&gt;

&lt;p&gt;什么是Stacking Context？假设你正在玩贴纸，将很多贴纸贴到同一张纸上，并且贴纸之间可能产生重叠。Stacking Context就像是这张纸。浏览器首先按照默认的重叠规律，将同一个Stacking Context下的所有元素排好顺序，然后按照这个顺序渲染到Stacking Context上。例如，在下面的DOM结构中，有5个box，其中&lt;code&gt;node1&lt;/code&gt;是一个Stacking Context，其他的都不是。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/mw690/6aadf779gw1eheltrbayzj20d109et8u.jpg&quot; alt=&quot;Stacking Context 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在渲染的时候，浏览器将&lt;code&gt;node1&lt;/code&gt;当做画板，其他box都是贴纸。在决定贴纸顺序的时候，浏览器是不会考虑它们DOM结构上的父子关系的。也就是说，&lt;code&gt;node3-1&lt;/code&gt;完全可以被渲染在&lt;code&gt;node2-1&lt;/code&gt;的后面，只要在前面所说的默认重叠顺序中，&lt;code&gt;node3-1&lt;/code&gt;具有的c坐标比&lt;code&gt;node2-1&lt;/code&gt;来得低即可。&lt;/p&gt;

&lt;p&gt;整个“贴纸”的过程如下图。可以看到，浏览器在当前Stacking Context中，无视了“贴纸”们的DOM结构之间的关系，而是通过我们前面提到的默认重叠顺序决定“贴纸”的先后关系。决定之后，浏览器将所有“贴纸”贴到Stacking Context上，这个过程称作Composite（组合）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw690/6aadf779gw1eheltrvlgsj20yk14v40k.jpg&quot; alt=&quot;Stacking Context 组合&quot; /&gt;&lt;/p&gt;
&lt;div id='什么样的元素是一个Stacking-Context' /&gt;
&lt;h2 id=&quot;stackingcontext_2&quot;&gt;什么样的元素是一个Stacking-Context&lt;/h2&gt;

&lt;p&gt;符合下面要求的页面box，都是一个Stacking Context。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;根元素（&lt;code&gt;html&lt;/code&gt;元素）&lt;/li&gt;

&lt;li&gt;&lt;code&gt;position&lt;/code&gt;是&lt;code&gt;absolute&lt;/code&gt;或者&lt;code&gt;relative&lt;/code&gt;，并且&lt;code&gt;z-index&lt;/code&gt;不是&lt;code&gt;auto&lt;/code&gt;的元素&lt;/li&gt;

&lt;li&gt;是flex item，并且&lt;code&gt;z-index&lt;/code&gt;不是&lt;code&gt;auto&lt;/code&gt;的元素&lt;/li&gt;

&lt;li&gt;&lt;code&gt;opacity&lt;/code&gt;值小于1的元素&lt;/li&gt;

&lt;li&gt;在mobile webkit以及Chrome 22+中，&lt;code&gt;position: fixed&lt;/code&gt;的元素&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考来源：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context&quot;&gt;The stacking context - MDN&lt;/a&gt;&lt;/p&gt;
&lt;div id='多个Stacking-Context之间的重叠' /&gt;
&lt;h2 id=&quot;stackingcontext_3&quot;&gt;多个Stacking-Context之间的重叠&lt;/h2&gt;

&lt;p&gt;由上面产生Stacking Context的条件，我们可以知道，一个页面上一般有多个Stacking Context。那么多个Stacking Context之间如何决定重叠顺序呢？浏览器一般按下面的规则来决定其顺序，这实际上就是之前我们提到的默认重叠顺序的完整版。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Stacking Context的背景和边框&lt;/li&gt;

&lt;li&gt;具有负的&lt;code&gt;z-index&lt;/code&gt;的，且&lt;code&gt;position&lt;/code&gt;值不是&lt;code&gt;static&lt;/code&gt;（非正常流中）的子box的Stacking Context，且&lt;code&gt;z-index&lt;/code&gt;数值越小，其c坐标越小&lt;/li&gt;

&lt;li&gt;正常流当中的block level的box&lt;/li&gt;

&lt;li&gt;浮动的元素&lt;/li&gt;

&lt;li&gt;正常流当中inline level或者inline-block level的box&lt;/li&gt;

&lt;li&gt;&lt;code&gt;position&lt;/code&gt;值不是&lt;code&gt;static&lt;/code&gt;（非正常流中）的box，且&lt;code&gt;z-index&lt;/code&gt;为0或者auto&lt;/li&gt;

&lt;li&gt;具有正的&lt;code&gt;z-index&lt;/code&gt;的，且&lt;code&gt;position&lt;/code&gt;值不是&lt;code&gt;static&lt;/code&gt;（非正常流中）的子box的Stacking Context，且&lt;code&gt;z-index&lt;/code&gt;数值越小，其c坐标越小&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;你需要注意到的是，&lt;code&gt;z-index&lt;/code&gt;只能作用在&lt;code&gt;position&lt;/code&gt;值不是&lt;code&gt;static&lt;/code&gt;的box上方能起效。下面的例子可以说明多个Stacking Context之间的重叠规律。&lt;/p&gt;
&lt;p class='codepen' data-default-tab='result' data-height='268' data-slug-hash='mjtxg' data-theme-id='0'&gt;See the Pen &lt;a href='http://codepen.io/tjwudi/pen/mjtxg/'&gt;mjtxg&lt;/a&gt; by John Wu (&lt;a href='http://codepen.io/tjwudi'&gt;@tjwudi&lt;/a&gt;) on &lt;a href='http://codepen.io'&gt;CodePen&lt;/a&gt;.&lt;/p&gt;&lt;script async='async' src='//codepen.io/assets/embed/ei.js'&gt;&lt;![CDATA[]]&gt;&lt;/script&gt;
&lt;p&gt;在这里，&lt;code&gt;.wrapper&lt;/code&gt;、&lt;code&gt;#b1&lt;/code&gt;和&lt;code&gt;#b2&lt;/code&gt;分别都是一个Stacking Context。&lt;code&gt;#b1&lt;/code&gt;和&lt;code&gt;#b2&lt;/code&gt;是&lt;code&gt;.wrapper&lt;/code&gt;的子Stacking Context，浏览器会首先组合&lt;code&gt;#b1&lt;/code&gt;以及组合&lt;code&gt;#b2&lt;/code&gt;，之后再将&lt;code&gt;#b1&lt;/code&gt;和&lt;code&gt;#b2&lt;/code&gt;组合到&lt;code&gt;.wrapper&lt;/code&gt;上。由于&lt;code&gt;#b1&lt;/code&gt;具有正的&lt;code&gt;z-index&lt;/code&gt;，而&lt;code&gt;#b2&lt;/code&gt;具有负的&lt;code&gt;z-index&lt;/code&gt;，所以&lt;code&gt;#b1&lt;/code&gt;被组合到了&lt;code&gt;#b2&lt;/code&gt;的上面。&lt;/p&gt;

&lt;p&gt;你可以试着把&lt;code&gt;#b1&lt;/code&gt;的&lt;code&gt;z-index&lt;/code&gt;改成&lt;code&gt;-2&lt;/code&gt;，那么它就变成了第二类的box（和&lt;code&gt;#b2&lt;/code&gt;一样），又因为它的&lt;code&gt;z-index&lt;/code&gt;比&lt;code&gt;#b2&lt;/code&gt;来得小，所以它会被组合到&lt;code&gt;#b2&lt;/code&gt;之后。&lt;/p&gt;

&lt;h2 id=&quot;_5&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;z-index&lt;/code&gt;只在同一个Stacking Context的组合过程中，参与各个子box的重叠顺序的决定。但是页面box的重叠关系并非仅仅和&lt;code&gt;z-index&lt;/code&gt;有关。清楚地认识&lt;code&gt;z-index&lt;/code&gt;的工作原理，有助于你写出更有效率的样式表。&lt;/p&gt;

&lt;p&gt;如果有任何问题，欢迎在评论区讨论。&lt;/p&gt;

&lt;h2 id=&quot;_6&quot;&gt;声明&lt;/h2&gt;

&lt;p&gt;本文图片和文章均为原创，转载请注明出处。这是对人最基本的尊重。&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>KISSY On The Way (1) - Module Pattern</title>
      <link>http://incorporated.sendtoinc.com/2014/05/29/kissy-module-pattern/</link>
      <pubDate>Thu, 29 May 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://incorporated.sendtoinc.com/2014/05/29/kissy-module-pattern</guid>
      <description>&lt;h2 id=&quot;&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;KISSY是一款跨终端、模块化、高性能、使用简单的JavaScript框架。除了完备的工具集合如DOM、Event、Ajax、Anim等，它还提供了经典的面向对象、动态加载、性能优化解决方案。作为一款全终端支持的JavaScript框架，KISSY为移动终端做了大量适配和优化，让你的程序在全终端均能流畅运行。&lt;/p&gt;

&lt;p&gt;本文介绍KISSY中提供的模块化方案，并且阐述如何利用KISSY的模块化方案构建多页面的站点。内容主要为以下几个部分&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#模块化JavaScript&quot;&gt;模块化JavaScript&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#KISSY模块&quot;&gt;KISSY模块&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#组织多页面应用&quot;&gt;组织多页面应用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中第一个部分“模块化JavaScript”是老生常谈的问题。但是鉴于读者来自不同的技术背景，我在这里还是会阐述这个内容。如果你觉得你不需要看这一部分内容，你可以很轻松地跳过它。&lt;/p&gt;
&lt;div id='模块化JavaScript' /&gt;
&lt;h2 id=&quot;javascript&quot;&gt;模块化JavaScript&lt;/h2&gt;

&lt;p&gt;在现代Web应用中，HTML负责定义页面的骨架，CSS负责定义页面的样式，JavaScript负责定义页面的动态交互效果。一开始的时候，人们经常把页面的全部JavaScript代码直接写写在页面的&lt;code&gt;script&lt;/code&gt;标签当中。到后来，应用体积越来越大，为了让页面代码更易于维护，也为了让多个页面可以重用代码，人们开始将JavaScript代码分离到单独的文件中。当一个页面需要使用某段JavaScript代码功能时，可以通过&lt;code&gt;script&lt;/code&gt;标签的&lt;code&gt;src&lt;/code&gt;属性引用这个代码文件。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='nt'&gt;&amp;lt;script &lt;/span&gt;&lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;external.js&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了更好地组织这些外部JS文件，模块化JS的方法就应运而生了。一个JS模块是一个封装好的功能单元，当一个页面需要这个功能时，可以通过模块的名称来调用它。&lt;/p&gt;

&lt;p&gt;例如“MyYahoo”的&lt;a href=&quot;http://my.yahoo.com&quot;&gt;首页&lt;/a&gt;（如下图）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/mw690/6aadf779gw1egv02kzw75j21k00xwqfn.jpg&quot; alt=&quot;MyYahoo首页&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最左上角的“天气”就是一个模块，我们假设它封装在&lt;code&gt;weather.js&lt;/code&gt;中，它的模块名为&lt;code&gt;srv-weather&lt;/code&gt;。最右上角的广告也是一个模块，假设它封装在&lt;code&gt;ad.js&lt;/code&gt;中，它的模块名为&lt;code&gt;srv-ad&lt;/code&gt;。那么页面就可以通过模块名调用这两个模块：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='nt'&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class='c1'&gt;// 伪代码&lt;/span&gt;
    &lt;span class='nx'&gt;Framework&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;use&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;weather&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;ad&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;weather&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;ad&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;weather&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;render&lt;/span&gt;&lt;span class='p'&gt;(...);&lt;/span&gt; &lt;span class='c1'&gt;// 使用weather模块&lt;/span&gt;
        &lt;span class='nx'&gt;ad&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;render&lt;/span&gt;&lt;span class='p'&gt;(...);&lt;/span&gt; &lt;span class='c1'&gt;// 使用ad模块&lt;/span&gt;
    &lt;span class='p'&gt;});&lt;/span&gt;
&lt;span class='nt'&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，模块化的JavaScript具有下面的好处：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;模块保持高度独立，代码的耦合度低&lt;/li&gt;

&lt;li&gt;代码可重用度高&lt;/li&gt;

&lt;li&gt;创建匿名函数作为模块逻辑代码运行的scope（域），防止污染全局变量。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;模块化的思想在生活中无处不在。比如在做录音的后期处理的时候，当录音师需要对人声添加混响，那么他就可以在Cubase（一个可以进行音频处理的软件）中对人声轨调用混响模块。他还可以对另一个声轨（比如小提琴声轨）添加混响，操作的方法也是直接调用混响模块。在这个过程中，混响模块是可以被多次调用的，达到了重用的目的。&lt;/p&gt;
&lt;div id='KISSY模块' /&gt;
&lt;h2 id=&quot;kissy&quot;&gt;KISSY模块&lt;/h2&gt;

&lt;p&gt;KISSY中提供了完备的模块化支持。接下来我们先从介绍如何编写一个简单的模块开始。在做所有的事情之前，你需要引用KISSY的seed文件（种子文件），它包含KISSY的核心功能。这个文件在淘宝CDN上，你可以直接使用。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='nt'&gt;&amp;lt;script &lt;/span&gt;&lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://g.tbcdn.cn/kissy/k/1.4.3/seed.js&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;_2&quot;&gt;编写简单的模块&lt;/h4&gt;

&lt;p&gt;你可以通过&lt;code&gt;KISSY.add&lt;/code&gt;新增一个模块，并将它放在一个文件中。这里假设我们要添加一个登陆框UI组件的模块，这个模块的路径为&lt;code&gt;ui/login-form.js&lt;/code&gt;。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='c1'&gt;// login-form.js&lt;/span&gt;
&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;S&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;S&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;add&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;S&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;Node&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;LoginForm&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{};&lt;/span&gt;
        &lt;span class='c1'&gt;// ... More code&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;LoginForm&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; 
    &lt;span class='p'&gt;},&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;requires&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;node&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
    &lt;span class='p'&gt;});&lt;/span&gt;
&lt;span class='p'&gt;})(&lt;/span&gt;&lt;span class='nx'&gt;KISSY&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里创建了一个匿名的模块。一般情况下，我们创建的模块都是匿名的。模块的名字一般就是该模块文件的相对路径去掉&lt;code&gt;.js&lt;/code&gt;的扩展名。例如在这个例子中，我们的模块名称就是&lt;code&gt;ui/login-form&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;第一个参数就是我们的模块逻辑，在这里我们返回&lt;code&gt;LoginForm&lt;/code&gt;类。这个类封装了我们模块的一些逻辑，比如渲染界面、事件处理等。&lt;/p&gt;

&lt;p&gt;第二个参数定义一些跟这个模块有关的参数，这里我们通过&lt;code&gt;requires&lt;/code&gt;配置选项来指定这个模块的依赖模块（dependencies），KISSY会为我们自动加载这些依赖模块。这里的&lt;code&gt;node&lt;/code&gt;模块是KISSY内置的一个模块，主要用于DOM操作。&lt;a href=&quot;http://docs.kissyui.com/1.4/docs/html/api/node/index.html&quot;&gt;文档&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;_3&quot;&gt;模块放哪里？&lt;/h4&gt;

&lt;p&gt;一般情况下，当你引用模块&lt;code&gt;a/b/c&lt;/code&gt;的时候，KISSY会在&lt;code&gt;http://g.tbcdn.cn/kissy/k/1.4.3/a/b/c.js&lt;/code&gt;找这个模块。其中，&lt;code&gt;http://g.tbcdn.cn/kissy/k/1.4.3&lt;/code&gt;是一个基地址。你可以通过&lt;code&gt;KISSY.config&lt;/code&gt;修改基地址。&lt;a href=&quot;http://docs.kissyui.com/1.4/docs/html/api/loader/config.html&quot;&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;KISSY&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;config&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt;
    &lt;span class='nx'&gt;base&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;http://localhost/scripts/&amp;quot;&lt;/span&gt; 
&lt;span class='p'&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，如果加载模块&lt;code&gt;ui/login-form&lt;/code&gt;，那么KISSY将会在&lt;code&gt;http://localhost/scripts/ui/login-form.js&lt;/code&gt;找到这个模块。&lt;/p&gt;

&lt;h4 id=&quot;_4&quot;&gt;使用模块&lt;/h4&gt;

&lt;p&gt;通过&lt;code&gt;KISSY.use&lt;/code&gt;可以创建一个封闭的沙盒，你可以包含一些依赖的模块。比如，我要创建一个登录的页面，那么在这个页面上我们就需要引入&lt;code&gt;ui/login-form&lt;/code&gt;这个模块。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;S&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;S&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;use&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;login-form&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;S&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;LoginForm&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;LoginForm&lt;/span&gt;&lt;span class='p'&gt;()).&lt;/span&gt;&lt;span class='nx'&gt;render&lt;/span&gt;&lt;span class='p'&gt;(...);&lt;/span&gt;
        &lt;span class='c1'&gt;// ... More code&lt;/span&gt;
    &lt;span class='p'&gt;});&lt;/span&gt;
&lt;span class='p'&gt;})(&lt;/span&gt;&lt;span class='nx'&gt;KISSY&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一个参数指定所有的依赖模块的名字，并由半角逗号隔开。第二个参数是我们的匿名函数（沙盒），第一个参数传入的是&lt;code&gt;KISSY&lt;/code&gt;对象自身，接下来是所有的依赖模块返回的对象。&lt;/p&gt;

&lt;p&gt;如果你还记得，我们刚才编写的&lt;code&gt;login-form&lt;/code&gt;模块返回了一个类&lt;code&gt;LoginForm&lt;/code&gt;。因此，在这里，我们只需实例化这个类，并通过这个实例对象往页面上添加我们的登陆框（这里假设用了&lt;code&gt;render&lt;/code&gt;方法来添加登陆框）。&lt;/p&gt;

&lt;h4 id=&quot;combo&quot;&gt;Combo!&lt;/h4&gt;

&lt;p&gt;一般而言，一个页面上可能需要十多个模块。这十多个模块中，有的是你要的模块，有的是你要的模块的依赖模块，有的是依赖模块的依赖模块……&lt;/p&gt;

&lt;p&gt;那么，如果让浏览器加载这么多的模块，必然会产生很多的HTTP请求。如果HTTP请求太多，将会严重拖慢页面的加载进度。&lt;/p&gt;

&lt;p&gt;一般情况下，我们一般采取本地编译的方法。通过本地编译，将所有模块合并成一个文件，并根据文件的路径赋予每个模块名称。如果这样做，HTTP请求的数量就会大大减少。但是这个方法存在一个问题，就是会让人心情不好。&lt;/p&gt;

&lt;p&gt;KISSY支持向服务器传送一串参数，代表请求的所有模块名，并由服务器来动态合并这些文件，并放到CDN（内容分发网络）上。要做到这一点，只需要在加载&lt;code&gt;seed.js&lt;/code&gt;的时候，在&lt;code&gt;script&lt;/code&gt;标签上加上&lt;code&gt;data-config=&amp;quot;{combine:true}&amp;quot;&lt;/code&gt;属性，KISSY就会自动切换成让服务器合并文件的方式了。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;&lt;span class='nt'&gt;&amp;lt;script &lt;/span&gt;&lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://g.tbcdn.cn/kissy/k/1.4.3/seed.js&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;data-config=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;{combine:true}&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时候，如果你观察网络传输面板（Chrome中通过开发者工具可以打开），会看到你的页面只发出了一个到&lt;code&gt;g.tbcdn.cn&lt;/code&gt;的请求。请求的URL是类似&lt;code&gt;http://g.tbcdn.cn/kissy/k/1.4.3/??node.js,dom/base.js,event/dom/base.js&lt;/code&gt;的形式，后面的参数即需要合并的模块文件。&lt;/p&gt;

&lt;p&gt;Combo是需要服务器端（或者CDN）支持的，实现一个支持Combo的简单服务器应用并不难，这里我们不再多阐述。如果你使用过&lt;a href=&quot;https://github.com/koajs/koa&quot;&gt;Koa&lt;/a&gt;，那么你可以用它来做静态资源服务器。配合我所编写的一个中间件&lt;a href=&quot;https://github.com/tjwudi/koa-combo&quot;&gt;koa-combo&lt;/a&gt;，以及koa的cache中间件，就可以搭建一个支持combo的静态资源服务器。&lt;/p&gt;

&lt;h4 id=&quot;_5&quot;&gt;包&lt;/h4&gt;

&lt;p&gt;有的时候，所有的模块并不在一个域名下面。回想一下，在常见的程序设计语言（如Java中），我们经常需要创建“命名空间”，或者说“包”。比如，在Java中，类&lt;code&gt;A&lt;/code&gt;在包&lt;code&gt;com.zihui.pkg1&lt;/code&gt;下，类&lt;code&gt;B&lt;/code&gt;在包&lt;code&gt;com.zihui.pkg2&lt;/code&gt;下，那么在引用类&lt;code&gt;A&lt;/code&gt;的时候，我们需要使用它的包名+类名来访问它，即&lt;code&gt;com.zihui.pkg1&lt;/code&gt;，引用类&lt;code&gt;B&lt;/code&gt;时，我们使用&lt;code&gt;com.zihui.pkg2&lt;/code&gt;来访问它。&lt;/p&gt;

&lt;p&gt;KISSY中提供了类似的机制，也叫做包机制。假设我们有一个模块&lt;code&gt;ui/login-form&lt;/code&gt;，基地址为&lt;code&gt;http://g.tbcdn.cn/common&lt;/code&gt;。另一个模块&lt;code&gt;ui/dynamic-nav&lt;/code&gt;，基地址为&lt;code&gt;http://ju.tbcdn.cn/common&lt;/code&gt;。那么我们为这两个基地址定义两个包。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;KISSY&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;config&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt;
    &lt;span class='nx'&gt;packages&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='s2'&gt;&amp;quot;g&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='nx'&gt;base&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;http://g.tbcdn.cn/common/&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;},&lt;/span&gt;
        &lt;span class='s2'&gt;&amp;quot;ju&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='nx'&gt;base&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;http://ju.tbcdn.cn/common/&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么我们就可以通过&lt;code&gt;g/ui/login-form&lt;/code&gt;访问原来的&lt;code&gt;ui/login-form&lt;/code&gt;模块，通过&lt;code&gt;ju/ui/dynamic-nav&lt;/code&gt;访问原来的&lt;code&gt;ui/dynamic-nav&lt;/code&gt;。&lt;/p&gt;
&lt;div id='组织多页面应用' /&gt;
&lt;h2 id=&quot;_6&quot;&gt;组织多页面应用&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;自古华山一条路？No！条条大路通罗马！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通过模块化的JS代码，可以很轻松地构建大型的应用程序。构建多页面大型应用程序的方式有很多种方式，这里我们介绍其中比较常见的一种。&lt;/p&gt;

&lt;h4 id=&quot;_7&quot;&gt;功能模块与页面模块&lt;/h4&gt;

&lt;p&gt;我们刚才谈到的一个个独立的模块都是功能模块。比如天气模块，日历模块，登陆表单模块等。&lt;/p&gt;

&lt;p&gt;页面的脚本也可以做成模块，我们称为页面模块。&lt;strong&gt;页面模块封装一类页面的交互功能&lt;/strong&gt;。这里我们拿聚划算的活动页面做为例子。&lt;a href=&quot;http://ju.taobao.com&quot;&gt;聚划算&lt;/a&gt;经常会举办一些团购活动，一些活动会有对应的主页。比如&lt;a href=&quot;http://ju.taobao.com/jusp/xueguolieche/tp.htm&quot;&gt;这个活动&lt;/a&gt;和&lt;a href=&quot;http://ju.taobao.com/jusp/jiancaijicai/tp.htm&quot;&gt;这个活动&lt;/a&gt;（这些页面不一定存在，因为你在看这篇文章的时候，它们可能已经下线了）。&lt;/p&gt;

&lt;p&gt;我们可以观察到，在聚划算的活动页面中，有不少可以重用的模块。比如商品的展示卡片模块（如下图）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/mw690/6aadf779gw1egvbun9stdj21i60iitfy.jpg&quot; alt=&quot;聚划算商品展示模块&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了商品展示模块经常在活动页面&lt;strong&gt;出没&lt;/strong&gt;外，还有不少的其他组件以及页面特效。因此，大部分的活动页面的交互功能是一样的。我们可以为活动页面专门编写一个模块，这个模块适用于所有的活动页面。聚划算的活动页面模块&lt;a href=&quot;http://g.tbcdn.cn/ju/jsp/1.0.27/??pages/activity/index.js&quot;&gt;在这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;页面模块在一般情况下就是加载页面需要的功能模块，并且再加一些页面的交互逻辑代码。聚划算活动页面中，加载页面模块的代码如下：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;KISSY&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;config&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt;
   &lt;span class='nx'&gt;packages&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;
      &lt;span class='p'&gt;{&lt;/span&gt;
          &lt;span class='nx'&gt;name&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;pages&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
          &lt;span class='nx'&gt;path&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;http://g.tbcdn.cn/ju/jsp/1.0.27&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
          &lt;span class='nx'&gt;charset&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
          &lt;span class='nx'&gt;debug&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;
      &lt;span class='p'&gt;},&lt;/span&gt;
      &lt;span class='p'&gt;{&lt;/span&gt;
          &lt;span class='nx'&gt;name&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;mods&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
          &lt;span class='nx'&gt;path&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;http://g.tbcdn.cn/ju/jsp/1.0.27&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
          &lt;span class='nx'&gt;charset&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
          &lt;span class='nx'&gt;debug&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
  &lt;span class='p'&gt;]&lt;/span&gt;
&lt;span class='p'&gt;});&lt;/span&gt;

&lt;span class='nx'&gt;KISSY&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;ready&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;S&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;S&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;use&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;pages/activity/index&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;S&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;Init&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;Init&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
    &lt;span class='p'&gt;});&lt;/span&gt;
&lt;span class='p'&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;页面上定义了两个包，&lt;code&gt;pages&lt;/code&gt;包和&lt;code&gt;mods&lt;/code&gt;包。他们的基地址是一样的，但是为了模块名称更加具有实际意义，还是将其分成了两个包。最后，我们通过加载&lt;code&gt;pages/activity/index&lt;/code&gt;模块（也就是刚才我们给出的那个页面模块）给页面加上交互功能。&lt;/p&gt;

&lt;h2 id=&quot;_8&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;模块化解耦合是软件工程上一个常用的功能组织方式。通过将功能模块化，我们的代码能获得更好的可维护性，也易于测试。&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>新型自动化构建工具gulp</title>
      <link>http://incorporated.sendtoinc.com/2014/05/16/gulp-intro/</link>
      <pubDate>Fri, 16 May 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://incorporated.sendtoinc.com/2014/05/16/gulp-intro</guid>
      <description>&lt;h2 id=&quot;&quot;&gt;声明&lt;/h2&gt;

&lt;p&gt;本文翻译自&lt;a href=&quot;http://markgoodyear.com/2014/01/getting-started-with-gulp/&quot;&gt;Getting started with gulp&lt;/a&gt;，本人翻译时进行了必要的改动。&lt;/p&gt;

&lt;h2 id=&quot;gulp&quot;&gt;gulp简介&lt;/h2&gt;

&lt;p&gt;说到JavaScript自动化构建工具，大家都会想到ant和grunt。今天向大家介绍一个新的工具，&lt;a href=&quot;https://github.com/gulpjs/gulp?source=cc&quot;&gt;gulp&lt;/a&gt;。使用gulp将避免像使用grunt一样书写很多的配置代码，学习起来更加的快捷。&lt;/p&gt;

&lt;p&gt;gulp使用node.js的stream API（流）执行自动化构建任务。使用流的好处就是不用每执行一个任务都要读写一次文件，在接下来的例子中，我将给你展示这点所带来的巨大好处。你可以使用gulp输入一个文件，将文件流pipe到一些插件中进行操作，然后写出到文件。&lt;br /&gt;在grunt中，你需要为每个插件书写输入文件，再书写输出文件。这样的话非常的不方便，特别是在项目文件结构变动的时候。下面的代码很能说明这个问题，这段代码是Gruntfile中的一个片段，它将Sass代码编译后传入autoprefixer进行自动前缀修饰。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;sass&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='nx'&gt;dist&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;options&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='nx'&gt;style&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;expanded&amp;#39;&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
    &lt;span class='nx'&gt;files&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='s1'&gt;&amp;#39;dist/assets/css/main.css&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;src/styles/main.scss&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;},&lt;/span&gt;

&lt;span class='nx'&gt;autoprefixer&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='nx'&gt;dist&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;options&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='nx'&gt;browsers&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;
        &lt;span class='s1'&gt;&amp;#39;last 2 version&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;safari 5&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;ie 8&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;ie 9&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;opera 12.1&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;ios 6&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;android 4&amp;#39;&lt;/span&gt;
      &lt;span class='p'&gt;]&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
    &lt;span class='nx'&gt;src&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;dist/assets/css/main.css&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='nx'&gt;dest&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;dist/assets/css/main.css&amp;#39;&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;},&lt;/span&gt;

&lt;span class='nx'&gt;grunt&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;registerTask&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;styles&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;sass&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;autoprefixer&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;正如你所见，使用grunt需要分别配置每个插件，并且定义每个插件的输入输出文件地址。有些根本就是不需要的中间文件，也会产生。比如上面的代码中，sass编译后的文件要让autoprefixer读入，那么又要在autoprefixer中去设置一次。&lt;/p&gt;

&lt;p&gt;那么如果用gulp则怎么做呢？你看到代码一定会大吃一惊。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;task&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;sass&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;src&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;src/styles/main.scss&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;sass&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='nx'&gt;style&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;compressed&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;}))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;autoprefixer&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;last 2 version&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;safari 5&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;ie 8&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;ie 9&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;opera 12.1&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;ios 6&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;android 4&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;dest&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;dist/assets/css&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
&lt;span class='p'&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用gulp，我们只需要读入一次文件，并将其内容通过流管道”流经”gulp的插件，之后输出到指定位置。看到这里，我就不信你不兴奋。那么就让我们开始着手学习使用gulp吧。&lt;/p&gt;

&lt;h2 id=&quot;gulp_2&quot;&gt;安装gulp&lt;/h2&gt;

&lt;p&gt;我们首先需要安装gulp，通过npm可以安装：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;npm install gulp -g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样我们就在系统全局安装了gulp，方便我们在CLI中调用它。接下来我们还需要在项目中安装gulp，并将其存到&lt;code&gt;package.json&lt;/code&gt;中&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;npm install gulp --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样安装gulp后，还会把它加入到&lt;code&gt;package.json&lt;/code&gt;的&lt;code&gt;devDependencies&lt;/code&gt;记录里。&lt;/p&gt;

&lt;h2 id=&quot;_2&quot;&gt;安装插件&lt;/h2&gt;

&lt;p&gt;上面看到的sass和autoprefixer都是gulp的插件，在这里我们列出常用的几个插件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sass compile (gulp-ruby-sass)&lt;/li&gt;

&lt;li&gt;Autoprefixer (gulp-autoprefixer)&lt;/li&gt;

&lt;li&gt;Minify CSS (gulp-minify-css)&lt;/li&gt;

&lt;li&gt;JSHint (gulp-jshint)&lt;/li&gt;

&lt;li&gt;Concatenation (gulp-concat)&lt;/li&gt;

&lt;li&gt;Uglify (gulp-uglify)&lt;/li&gt;

&lt;li&gt;Compress images (gulp-imagemin)&lt;/li&gt;

&lt;li&gt;LiveReload (gulp-livereload, requires tiny-lr)&lt;/li&gt;

&lt;li&gt;Clean files for a clean build (gulp-clean)&lt;/li&gt;

&lt;li&gt;Caching of images so only changed images are compressed (gulp-cache)&lt;/li&gt;

&lt;li&gt;Notify of changes (gulp-notify)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;完整的插件列表可以在文章开头给出的gulp的github主页找到。要安装上述插件，运行下面的命令&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;npm install gulp-ruby-sass gulp-autoprefixer gulp-minify-css gulp-jshint gulp-concat gulp-uglify gulp-imagemin gulp-clean gulp-notify gulp-rename gulp-livereload tiny-lr gulp-cache --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;_3&quot;&gt;加载插件&lt;/h2&gt;

&lt;p&gt;接下来，我们在项目的根目录创建gulpfile.js并加载这些插件。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;gulp&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;sass&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-ruby-sass&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;autoprefixer&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-autoprefixer&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;minifycss&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-minify-css&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;jshint&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-jshint&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;uglify&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-uglify&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;imagemin&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-imagemin&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;rename&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-rename&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;clean&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-clean&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;concat&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-concat&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;notify&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-notify&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;cache&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-cache&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;livereload&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-livereload&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;lr&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;tiny-lr&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;server&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;lr&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;哇塞！这看起来比grunt要写的还多嘛……LZ骗人T_T……&lt;/p&gt;

&lt;p&gt;我没有骗你们，gulp的插件和grunt有一些小小的不同，gulp的每个插件执行的任务非常单一，都是专注于做好一件事情。比如，grunt的imagemin插件利用caching来避免重复压缩同样的文件，而gulp不一样，在gulp中cache插件与压缩插件是两个插件，而不像grunt一样一个插件包办两件事情。&lt;/p&gt;

&lt;p&gt;当然了，我们也可以自动去加载这些插件，不必要每次都要写这一长串（其实你也不会用到这么多）。如果对自动加载插件感兴趣，&lt;a href=&quot;https://github.com/jackfranklin/gulp-load-tasks&quot;&gt;请点这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;注意下，LiveReload这个插件应该有不少人可以猜出来是用来做即时开发的，也就是页面会随着代码变化而变化，但是他还需要额外的工具&lt;code&gt;tiny-lr&lt;/code&gt;支持。更多的信息，则需要去阅读其github主页的文档哦。&lt;/p&gt;

&lt;h2 id=&quot;_4&quot;&gt;实战！创建任务&lt;/h2&gt;

&lt;p&gt;这次我们的任务是编译Sass代码，进行autoprefix，然后minify。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;task&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;styles&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;src&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;src/styles/main.scss&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;sass&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='nx'&gt;style&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;expanded&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;}))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;autoprefixer&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;last 2 version&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;safari 5&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;ie 8&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;ie 9&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;opera 12.1&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;ios 6&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;android 4&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;dest&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;dist/assets/css&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;rename&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt;&lt;span class='nx'&gt;suffix&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;.min&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;}))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;minifycss&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;dest&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;dist/assets/css&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;livereload&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;server&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;notify&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='nx'&gt;message&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Styles task complete&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;}));&lt;/span&gt;
&lt;span class='p'&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们来一步步地看这份代码。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;task&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;taskname&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='p'&gt;...&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;定义一个任务，第一个参数给出的是任务名，第二个参数的函数即任务的主体。给出任务名以后，就可以在CLI下面直接运行&lt;code&gt;$  taskname&lt;/code&gt;来执行某项具体任务，如果执行&lt;code&gt;$ gulp&lt;/code&gt;则运行&lt;code&gt;default&lt;/code&gt;任务。（这点跟grunt是一样的）&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;src&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;src/styles/main.scss&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是一个API——&lt;code&gt;gulp.src&lt;/code&gt;，在这里我们可以定义输入文件（看src的字面意思便知）。它支持glob通配符，因此也可以是类似&lt;code&gt;/**/*.scss&lt;/code&gt;的文件名输入。这样的话将会处理多个文件。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;sass&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='nx'&gt;style&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;expanded&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;利用&lt;code&gt;.pipe(plugin)&lt;/code&gt;将文件通过流管道”流通”，&lt;code&gt;plugin&lt;/code&gt;即前面加载的任何插件。插件的参数一般都可以在他们的github主页找到。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;dest&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;dist/assets/css&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;gulp.dest&lt;/code&gt;这个API负责输出文件。这点很酷，我们可以在这中间输出文件多次（比如上面代码中的两次文件输出）。有时候同时需要非minify的版本和minify的版本，这个时候这样的特性就派上用场了。我建议大家看一次&lt;a href=&quot;https://github.com/gulpjs/gulp/blob/master/docs/API.md&quot;&gt;gulp的API文档&lt;/a&gt;，才能对其功能有所了解。英文并不可怕！它很好读懂。想要了解其他的插件的使用方式，也都可以在他们的github主页找到！&lt;/p&gt;

&lt;h2 id=&quot;default&quot;&gt;default任务&lt;/h2&gt;

&lt;p&gt;我们如果在cli运行&lt;code&gt;$ gulp&lt;/code&gt;就可以启动default任务。在default任务中尽量不要动项目代码，而是通过&lt;code&gt;gulp.start&lt;/code&gt; API启动其他的任务。这样可以让我们的gulpfile更好维护。我们都是工程师，都喜欢干净，整洁，符合规范的东西。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;task&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;clean&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;start&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;styles&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;scripts&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;_5&quot;&gt;大观&lt;/h2&gt;

&lt;p&gt;我们来看一个比较完整的gulpfile，并且拿一个gruntfile作对比。它们两个分别都实现了相同的任务功能。看看，你喜欢哪个？别忘了告诉我：）&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='c1'&gt;// gulpfile.js&lt;/span&gt;
&lt;span class='c1'&gt;// Load plugins&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;gulp&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;sass&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-ruby-sass&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;autoprefixer&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-autoprefixer&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;minifycss&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-minify-css&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;jshint&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-jshint&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;uglify&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-uglify&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;imagemin&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-imagemin&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;rename&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-rename&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;clean&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-clean&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;concat&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-concat&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;notify&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-notify&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;cache&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-cache&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;livereload&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;gulp-livereload&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;lr&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;require&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;tiny-lr&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
    &lt;span class='nx'&gt;server&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;lr&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
 
&lt;span class='c1'&gt;// Styles&lt;/span&gt;
&lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;task&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;styles&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;src&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;src/styles/main.scss&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;sass&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='nx'&gt;style&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;expanded&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;}))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;autoprefixer&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;last 2 version&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;safari 5&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;ie 8&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;ie 9&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;opera 12.1&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;ios 6&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;android 4&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;dest&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;dist/styles&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;rename&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='nx'&gt;suffix&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;.min&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;}))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;minifycss&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;livereload&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;server&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;dest&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;dist/styles&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;notify&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='nx'&gt;message&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Styles task complete&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;}));&lt;/span&gt;
&lt;span class='p'&gt;});&lt;/span&gt;
 
&lt;span class='c1'&gt;// Scripts&lt;/span&gt;
&lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;task&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;scripts&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;src&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;src/scripts/**/*.js&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;jshint&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;.jshintrc&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;jshint&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;reporter&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;concat&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;main.js&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;dest&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;dist/scripts&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;rename&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='nx'&gt;suffix&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;.min&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;}))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;uglify&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;livereload&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;server&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;dest&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;dist/scripts&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;notify&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='nx'&gt;message&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Scripts task complete&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;}));&lt;/span&gt;
&lt;span class='p'&gt;});&lt;/span&gt;
 
&lt;span class='c1'&gt;// Images&lt;/span&gt;
&lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;task&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;src&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;src/images/**/*&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;cache&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;imagemin&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='nx'&gt;optimizationLevel&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;progressive&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;interlaced&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt; &lt;span class='p'&gt;})))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;livereload&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;server&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;dest&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;dist/images&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;notify&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='nx'&gt;message&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Images task complete&amp;#39;&lt;/span&gt; &lt;span class='p'&gt;}));&lt;/span&gt;
&lt;span class='p'&gt;});&lt;/span&gt;
 
&lt;span class='c1'&gt;// Clean&lt;/span&gt;
&lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;task&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;clean&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;src&lt;/span&gt;&lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;dist/styles&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;dist/scripts&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;dist/images&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='nx'&gt;read&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kc'&gt;false&lt;/span&gt;&lt;span class='p'&gt;})&lt;/span&gt;
    &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;pipe&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;clean&lt;/span&gt;&lt;span class='p'&gt;());&lt;/span&gt;
&lt;span class='p'&gt;});&lt;/span&gt;
 
&lt;span class='c1'&gt;// Default task&lt;/span&gt;
&lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;task&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;clean&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;start&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;styles&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;scripts&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;});&lt;/span&gt;
 
&lt;span class='c1'&gt;// Watch&lt;/span&gt;
&lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;task&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;watch&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
 
  &lt;span class='c1'&gt;// Listen on port 35729&lt;/span&gt;
  &lt;span class='nx'&gt;server&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;listen&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;35729&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;err&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;err&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;err&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;};&lt;/span&gt;
 
    &lt;span class='c1'&gt;// Watch .scss files&lt;/span&gt;
    &lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;watch&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;src/styles/**/*.scss&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;styles&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt;
 
    &lt;span class='c1'&gt;// Watch .js files&lt;/span&gt;
    &lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;watch&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;src/scripts/**/*.js&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;scripts&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt;
 
    &lt;span class='c1'&gt;// Watch image files&lt;/span&gt;
    &lt;span class='nx'&gt;gulp&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;watch&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;src/images/**/*&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]);&lt;/span&gt;
 
  &lt;span class='p'&gt;});&lt;/span&gt;
 
&lt;span class='p'&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='c1'&gt;// Gruntfile.js&lt;/span&gt;
&lt;span class='cm'&gt;/*!&lt;/span&gt;
&lt;span class='cm'&gt; * Grunt&lt;/span&gt;
&lt;span class='cm'&gt; * $ npm install grunt-contrib-uglify grunt-autoprefixer grunt-contrib-cssmin grunt-contrib-imagemin grunt-contrib-sass grunt-contrib-watch grunt-contrib-concat grunt-contrib-clean grunt-contrib-jshint grunt-notify --save-dev&lt;/span&gt;
&lt;span class='cm'&gt; */&lt;/span&gt;
 
&lt;span class='nx'&gt;module&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;exports&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;grunt&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
 
  &lt;span class='nx'&gt;grunt&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;initConfig&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt;
 
    &lt;span class='c1'&gt;// Sass&lt;/span&gt;
    &lt;span class='nx'&gt;sass&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='nx'&gt;dist&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;options&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
          &lt;span class='nx'&gt;style&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;expanded&amp;#39;&lt;/span&gt;
        &lt;span class='p'&gt;},&lt;/span&gt;
        &lt;span class='nx'&gt;files&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
          &lt;span class='s1'&gt;&amp;#39;dist/styles/main.css&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;src/styles/main.scss&amp;#39;&lt;/span&gt;
        &lt;span class='p'&gt;}&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
 
    &lt;span class='c1'&gt;// Autoprefix&lt;/span&gt;
    &lt;span class='nx'&gt;autoprefixer&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='nx'&gt;options&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;browsers&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;
          &lt;span class='s1'&gt;&amp;#39;last 2 version&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;safari 5&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;ie 8&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;ie 9&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;opera 12.1&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;ios 6&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;android 4&amp;#39;&lt;/span&gt;
        &lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='p'&gt;},&lt;/span&gt;
      &lt;span class='nx'&gt;dist&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;src&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;dist/styles/main.css&amp;#39;&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
 
    &lt;span class='c1'&gt;// CSS minify&lt;/span&gt;
    &lt;span class='nx'&gt;cssmin&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='nx'&gt;dist&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;files&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
          &lt;span class='s1'&gt;&amp;#39;dist/styles/main.min.css&amp;#39;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;dist/styles/main.css&amp;#39;&lt;/span&gt;
        &lt;span class='p'&gt;}&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
 
    &lt;span class='c1'&gt;// JShint&lt;/span&gt;
    &lt;span class='nx'&gt;jshint&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='nx'&gt;files&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;src/scripts/**/*.js&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;
      &lt;span class='nx'&gt;options&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;jshintrc&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;.jshintrc&amp;#39;&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
 
    &lt;span class='c1'&gt;// Concat&lt;/span&gt;
    &lt;span class='nx'&gt;concat&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='nx'&gt;js&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;src&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;src/scripts/**/*.js&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;
        &lt;span class='nx'&gt;dest&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;dist/scripts/main.js&amp;#39;&lt;/span&gt;
      &lt;span class='p'&gt;},&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
 
    &lt;span class='c1'&gt;// Uglify&lt;/span&gt;
    &lt;span class='nx'&gt;uglify&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='nx'&gt;dist&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;src&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;dist/scripts/main.js&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;dest&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;dist/scripts/main.min.js&amp;#39;&lt;/span&gt;
      &lt;span class='p'&gt;},&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
 
    &lt;span class='c1'&gt;// Imagemin&lt;/span&gt;
    &lt;span class='nx'&gt;imagemin&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='nx'&gt;dist&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;options&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
          &lt;span class='nx'&gt;optimizationLevel&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
          &lt;span class='nx'&gt;progressive&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
          &lt;span class='nx'&gt;interlaced&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;
        &lt;span class='p'&gt;},&lt;/span&gt;
        &lt;span class='nx'&gt;files&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[{&lt;/span&gt;
          &lt;span class='nx'&gt;expand&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
          &lt;span class='nx'&gt;cwd&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;src/images&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
          &lt;span class='nx'&gt;src&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;**/*.{png,jpg,gif}&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;
          &lt;span class='nx'&gt;dest&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;dist/images&amp;#39;&lt;/span&gt;
        &lt;span class='p'&gt;}]&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
 
    &lt;span class='c1'&gt;// Clean&lt;/span&gt;
    &lt;span class='nx'&gt;clean&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='nx'&gt;build&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;dist/styles&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;dist/scripts&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;dist/images&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
 
    &lt;span class='c1'&gt;// Notify&lt;/span&gt;
    &lt;span class='nx'&gt;notify&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='nx'&gt;styles&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;options&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
          &lt;span class='nx'&gt;message&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Styles task complete&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='p'&gt;}&lt;/span&gt;
      &lt;span class='p'&gt;},&lt;/span&gt;
      &lt;span class='nx'&gt;scripts&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;options&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
          &lt;span class='nx'&gt;message&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Scripts task complete&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='p'&gt;}&lt;/span&gt;
      &lt;span class='p'&gt;},&lt;/span&gt;
      &lt;span class='nx'&gt;images&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;options&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
          &lt;span class='nx'&gt;message&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;Images task complete&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='p'&gt;}&lt;/span&gt;
      &lt;span class='p'&gt;},&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
 
    &lt;span class='c1'&gt;// Watch&lt;/span&gt;
    &lt;span class='nx'&gt;watch&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='nx'&gt;styles&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;files&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;src/styles/**/*.scss&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;tasks&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;sass&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;autoprefixer&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;cssmin&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;notify:styles&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;
      &lt;span class='p'&gt;},&lt;/span&gt;
      &lt;span class='nx'&gt;scripts&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;files&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;src/scripts/**/*.js&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;tasks&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;concat&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;uglify&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;notify:scripts&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;
      &lt;span class='p'&gt;},&lt;/span&gt;
      &lt;span class='nx'&gt;images&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;files&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;src/images/**/*&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;tasks&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;imagemin&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;notify:images&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;
      &lt;span class='p'&gt;},&lt;/span&gt;
      &lt;span class='nx'&gt;livereload&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;options&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='nx'&gt;livereload&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt; &lt;span class='p'&gt;},&lt;/span&gt;
        &lt;span class='nx'&gt;files&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;
          &lt;span class='s1'&gt;&amp;#39;dist/styles/**/*.css&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
          &lt;span class='s1'&gt;&amp;#39;dist/scripts/**/*.js&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
          &lt;span class='s1'&gt;&amp;#39;dist/images/**/*&amp;#39;&lt;/span&gt;
        &lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
  &lt;span class='p'&gt;});&lt;/span&gt;
 
  &lt;span class='c1'&gt;// Default task&lt;/span&gt;
  &lt;span class='nx'&gt;grunt&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;registerTask&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;
    &lt;span class='s1'&gt;&amp;#39;jshint&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='s1'&gt;&amp;#39;clean&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='s1'&gt;&amp;#39;concat&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='s1'&gt;&amp;#39;uglify&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='s1'&gt;&amp;#39;sass&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='s1'&gt;&amp;#39;autoprefixer&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='s1'&gt;&amp;#39;cssmin&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
    &lt;span class='s1'&gt;&amp;#39;imagemin&amp;#39;&lt;/span&gt;
  &lt;span class='p'&gt;]);&lt;/span&gt;
 
  &lt;span class='c1'&gt;// Load plugins&lt;/span&gt;
  &lt;span class='nx'&gt;grunt&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;loadNpmTasks&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;grunt-contrib-uglify&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='nx'&gt;grunt&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;loadNpmTasks&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;grunt-autoprefixer&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='nx'&gt;grunt&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;loadNpmTasks&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;grunt-contrib-cssmin&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='nx'&gt;grunt&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;loadNpmTasks&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;grunt-contrib-sass&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='nx'&gt;grunt&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;loadNpmTasks&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;grunt-contrib-watch&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='nx'&gt;grunt&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;loadNpmTasks&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;grunt-contrib-concat&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='nx'&gt;grunt&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;loadNpmTasks&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;grunt-contrib-jshint&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='nx'&gt;grunt&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;loadNpmTasks&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;grunt-contrib-imagemin&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='nx'&gt;grunt&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;loadNpmTasks&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;grunt-contrib-clean&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
  &lt;span class='nx'&gt;grunt&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;loadNpmTasks&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;grunt-notify&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
 
&lt;span class='p'&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我想就我个人而言，gulp更具有描述性，更符合我们的思维方式。符合思维方式的东西用起来一定是易于维护的。&lt;/p&gt;

&lt;h1 id=&quot;_6&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;gulp和grunt、ant，孰优孰劣，由你定夺。但是总是多了一条路让人选择，而且确实看着就让人兴奋。&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>Git速成班: git rebase</title>
      <link>http://incorporated.sendtoinc.com/2014/05/14/crash-course-git-rebase/</link>
      <pubDate>Wed, 14 May 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://incorporated.sendtoinc.com/2014/05/14/crash-course-git-rebase</guid>
      <description>&lt;h2 id=&quot;&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;在Git中，用两种方法将两个不同的branch合并。一种是通过&lt;code&gt;git merge&lt;/code&gt;，一种是通过&lt;code&gt;git rebase&lt;/code&gt;。然而，大部分人都习惯于使用&lt;code&gt;git merge&lt;/code&gt;，而忽略&lt;code&gt;git rebase&lt;/code&gt;。本文将介绍&lt;code&gt;git rebase&lt;/code&gt;的原理、使用方式及应用范围。&lt;/p&gt;

&lt;h2 id=&quot;git_merge_&quot;&gt;git merge 做些什么&lt;/h2&gt;

&lt;p&gt;当我们在开发一些新功能的时候，往往需要建立新的branch。（图片来源于&lt;a href=&quot;http://git-scm.com/&quot;&gt;git-scm.com&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;img alt='' class='img-responsive' src='http://git-scm.com/figures/18333fig0327-tn.png' /&gt;&lt;/p&gt;

&lt;p&gt;在上图中，每一个绿框均代表一个commit。除了c1，每一个commit都有一条有向边指向它在当前branch当中的上一个commit。&lt;/p&gt;

&lt;p&gt;图中的项目，在c2之后就开了另外一个branch，名为&lt;code&gt;experiment&lt;/code&gt;。在此之后，&lt;code&gt;master&lt;/code&gt;下的修改被放到c4 commit中，&lt;code&gt;experiment&lt;/code&gt;下的修改被放到c3 commit中。&lt;/p&gt;

&lt;p&gt;如果我们使用&lt;code&gt;merge&lt;/code&gt;合并两个分支&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout master
$ git merge experiment&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到的commit log如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img alt='' class='img-responsive' src='http://git-scm.com/figures/18333fig0328-tn.png' /&gt;&lt;/p&gt;

&lt;p&gt;我们看到，&lt;code&gt;merge&lt;/code&gt;所做的事情实际上是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;首先找到&lt;code&gt;master&lt;/code&gt;和&lt;code&gt;experiment&lt;/code&gt;中最新的commit的最近公共祖先，在这里就是&lt;code&gt;c4&lt;/code&gt;和&lt;code&gt;c3&lt;/code&gt;的最近公共祖先&lt;code&gt;c2&lt;/code&gt;。&lt;/li&gt;

&lt;li&gt;将&lt;code&gt;experiment&lt;/code&gt;分支上在&lt;code&gt;c2&lt;/code&gt;以后的所有commit合并成一个commit，并与&lt;code&gt;master&lt;/code&gt;合并&lt;/li&gt;

&lt;li&gt;如有合并冲突（两个分支修改了同一个文件），首先人工去除重复。&lt;/li&gt;

&lt;li&gt;在master上产生合并后的新commit&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;git_rebase&quot;&gt;git rebase做些什么&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;rebase&lt;/code&gt;所做的事情也是合并两个分支，但是它的方式略有不同。基于上例描述，&lt;code&gt;rebase&lt;/code&gt;的工作流程是&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;首先找到&lt;code&gt;master&lt;/code&gt;和&lt;code&gt;experiment&lt;/code&gt;中最新的commit的最近公共祖先，在这里就是&lt;code&gt;c4&lt;/code&gt;和&lt;code&gt;c3&lt;/code&gt;的最近公共祖先&lt;code&gt;c2&lt;/code&gt;。&lt;/li&gt;

&lt;li&gt;将&lt;code&gt;experiment&lt;/code&gt;分支上在&lt;code&gt;c2&lt;/code&gt;以后的所有commit&lt;strong&gt;全部移动到&lt;/strong&gt;&lt;code&gt;master&lt;/code&gt;分支的最新commit之后，在这里就是把&lt;code&gt;c3&lt;/code&gt;移动到&lt;code&gt;c4&lt;/code&gt;以后。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img alt='' class='img-responsive' src='http://git-scm.com/figures/18333fig0329-tn.png' /&gt;&lt;/p&gt;

&lt;p&gt;由于git的每一个commit都只存储相对上一个commit的变化（或者说是差值，delta）。我们通过移动c3到&lt;code&gt;master&lt;/code&gt;，代表着在&lt;code&gt;master&lt;/code&gt;上进行c3相应的修改。为了达成这一点，只需在&lt;code&gt;experiment&lt;/code&gt;分支上&lt;code&gt;rebase master&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout experiment
$ git rebase master&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要注意的是，&lt;code&gt;rebase&lt;/code&gt;并不是直接将c3移动到master上，而是创建一个副本。我们可以通过实际操作发现这一点。在&lt;code&gt;rebase&lt;/code&gt;前后，c3的hash code是不一样的。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rebase&lt;/code&gt;前的commit log是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 1b4c6d6 (master) &amp;lt;- c4
| * 66c417b (experiment) &amp;lt;- c3
|/  
*   972628d&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;rebase&lt;/code&gt;后的commit log是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* d9eeb1a - (experiment) &amp;lt;- c3'
* 1b4c6d6 - (master) &amp;lt;- c4
* 972628d&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以发现c3的hash code从&lt;code&gt;66c417b&lt;/code&gt;变到了&lt;code&gt;d9eeb1a&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在这之后，我们只需要在&lt;code&gt;master&lt;/code&gt;上进行一次前向合并(fast-forward merge)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git checkout master
$ git merge experiment&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt='' class='img-responsive' src='http://git-scm.com/figures/18333fig0330-tn.png' /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rebase&lt;/code&gt;之后的commit log呈线性，更加清晰。此时如果experiment分支不再被需要，我们可以删除它。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git branch -d experiment&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;_2&quot;&gt;何时使用&lt;/h2&gt;

&lt;p&gt;我们一般只在本地开发的时候&lt;code&gt;rebase&lt;/code&gt;一个自己写出来的branch。&lt;/p&gt;

&lt;p&gt;谨记，&lt;strong&gt;千万不要rebase一个已经发布到远程git服务器的分支&lt;/strong&gt;。例如，你如果将分支&lt;code&gt;experiment&lt;/code&gt;发布到了GitHub，那么你就不应该将它&lt;code&gt;rebase&lt;/code&gt;到&lt;code&gt;master&lt;/code&gt;上。因为如果你将它&lt;code&gt;rebase&lt;/code&gt;到&lt;code&gt;master&lt;/code&gt;上，将对其他人造成麻烦。&lt;/p&gt;

&lt;h2 id=&quot;_3&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;git rebase&lt;/code&gt;帮助我们避免&lt;code&gt;merge&lt;/code&gt;带来的复杂commit log，允许以线性commit的形式进行分支开发。&lt;/p&gt;

&lt;p&gt;更多有关&lt;code&gt;git rebase&lt;/code&gt;的更多用法，见&lt;a href=&quot;http://git-scm.com/book/en/Git-Branching-Rebasing&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>vertical-align详解</title>
      <link>http://incorporated.sendtoinc.com/2014/05/13/vertical-align/</link>
      <pubDate>Tue, 13 May 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://incorporated.sendtoinc.com/2014/05/13/vertical-align</guid>
      <description>&lt;h2 id=&quot;verticalalign&quot;&gt;vertical-align&lt;/h2&gt;

&lt;p&gt;属性&lt;code&gt;vertical-align&lt;/code&gt;影响一个内联级元素（inline-level element）垂直方向上的布局。具体适用于&lt;code&gt;display&lt;/code&gt;值为&lt;code&gt;inline&lt;/code&gt;,&lt;code&gt;inline-block&lt;/code&gt;或&lt;code&gt;table-cell&lt;/code&gt;的元素。&lt;/p&gt;

&lt;p&gt;其可选的值有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;baseline&lt;/li&gt;

&lt;li&gt;middle&lt;/li&gt;

&lt;li&gt;sub&lt;/li&gt;

&lt;li&gt;super&lt;/li&gt;

&lt;li&gt;text-top&lt;/li&gt;

&lt;li&gt;text-bottom&lt;/li&gt;

&lt;li&gt;percentage&lt;/li&gt;

&lt;li&gt;length&lt;/li&gt;

&lt;li&gt;top&lt;/li&gt;

&lt;li&gt;bottom&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中除了bottom和top外，这些值是相对于父内联元素（或父块包含元素）来说的。对于内联非替换元素来说，被用来布局的子元素盒子的高度由其子元素的&lt;code&gt;line-height&lt;/code&gt;属性来确定。而对于不是内联非替换元素的其他元素来说，子元素盒子则是其margin box。&lt;/p&gt;

&lt;p&gt;举个例子来表现子元素为inline和inline-block时的不同：&lt;/p&gt;

&lt;pre class=&quot;xml&quot;&gt;&lt;code class=&quot;xml&quot;&gt;
&amp;lt;div class=&amp;quot;ctn-block&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;child child1&amp;quot;&amp;gt;child1&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;child child2&amp;quot;&amp;gt;child2&amp;lt;/div&amp;gt;
    &amp;lt;span&amp;gt;Gg&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;css21&quot;&gt;&lt;code class=&quot;css21&quot;&gt;
.ctn-block {
    display: block;
    background-color: #bbb;
}

.ctn-block span {
    font-size: 50px;
    line-height: 200px;
}

.ctn-block .child {
    margin: 10px 0;
    border: 10px solid bisque;
    font-size: 32px;
    vertical-align: top;
    background-color: aliceblue;
}

.ctn-block .child1 {
    display: inline;
}
.ctn-block .child2 {
    display: inline-block;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果图如下： &lt;img src=&quot;http://skyinlayer.com/img/verticalalign/1.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到，inline元素只会将其content box用来定位，而inline-block元素则会将将其margin box用来定位。结合inline元素的特性，就很好理解了&lt;/p&gt;

&lt;p&gt;除了bottom和top外，其他根据父内联元素（或父块包含元素）来确定。这句话下面会给出实例&lt;/p&gt;

&lt;h2 id=&quot;baseline&quot;&gt;baseline的确定&lt;/h2&gt;

&lt;h3 id=&quot;baseline_2&quot;&gt;什么是baseline&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/2.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里大写字母&lt;code&gt;G&lt;/code&gt;底端的那条线，即为baseline&lt;/p&gt;

&lt;p&gt;下面以如下代码为基础，来比较&lt;code&gt;vertical-align&lt;/code&gt;值不同时的效果：&lt;/p&gt;

&lt;pre class=&quot;xml&quot;&gt;&lt;code class=&quot;xml&quot;&gt;
&amp;lt;div class=&amp;quot;ctn-block&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;child1&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;span&amp;gt;Gg&amp;lt;/span&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;css21&quot;&gt;&lt;code class=&quot;css21&quot;&gt;
.ctn-block {
    display: block;
    background-color: #bbb;
    line-height: 200px;
    font-size: 50px;
}

.ctn-block .child1 {
    display: inline-block;
    width: 100px;
    height: 100px;
    margin: 10px 0;
    
    /*vertical-align: baseline;*/
    
    background-color: aliceblue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里&lt;code&gt;.ctn-block&lt;/code&gt;为父元素，&lt;code&gt;.child1&lt;/code&gt;为子元素，父元素的baseline根据规则，为最后一个line box的baseline，也就是说其baseline为如下红线：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/3.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;而由于子元素为&lt;code&gt;display: inline-block&lt;/code&gt;，其内部没有内容，也没有line box，所以根据如下计算规则:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果它内部没有line box或它的overflow属性不是visible，那么baseline将是这个inline-block元素的底margin边界&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那么，它的baseline就是其margin-bottom边界，如红线所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/4.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;baseline_3&quot;&gt;元素的baseline&lt;/h3&gt;

&lt;p&gt;inline-table元素的baseline是它table第一行的baseline&lt;/p&gt;

&lt;p&gt;inline-block元素的baseline是他普通流中最后一个line box的baseline。如果它内部没有line box或它的overflow属性不是visible，那么baseline将是这个inline-block元素的底margin边界&lt;/p&gt;

&lt;p&gt;如果想要了解更多关于baseline的详细的信息，可以参照&lt;a href=&quot;http://dev.w3.org/csswg/css-inline/#baseline&quot;&gt;W3C标准css-inline的baseline部分&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;更多关于baseline的确定方式可以参照&lt;a href=&quot;http://dev.w3.org/csswg/css-align/#baseline-rules&quot;&gt;W3C标准css-align的baseline-rules部分&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;line_boxbaseline&quot;&gt;line box的baseline&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;CSS 2.1 does not define the position of the line box’s baseline&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;CSS 2.1没有定义baseline具体的位置。但经过测试，在chrome中，line box的baseline为其中所有inline-level元素（vertical值不为top或bottom）的baseline中位置最下面的一个basenline。如果vertical值为middle，其baseline为元素中点所在水平线 比如如下例子：&lt;/p&gt;

&lt;pre class=&quot;xml&quot;&gt;&lt;code class=&quot;xml&quot;&gt;
&amp;lt;div class=&amp;quot;ctn-block&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;child child-1&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;child child-2&amp;quot;&amp;gt;ggggggggggggggggggggggggggggggggggg&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;child child-3&amp;quot;&amp;gt;ggggggggggggggggggggggggggggggggggggggggggggggggg&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;css21&quot;&gt;&lt;code class=&quot;css21&quot;&gt;
.ctn-block {
    width: 400px;
    display: block;
    background-color: #bbb;
}

.ctn-block .child {
    display: inline-block;
    width: 100px;
    background-color: aliceblue;
}

.ctn-block .child-1 {
    height: 100px;
}
.ctn-block .child-2 {
    height: 200px;
}
.ctn-block .child-3 {
    height: 350px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到布局效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/5.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于child-1没有内容，其baseline为其margin-bottom外边界，而child-2和child-3的baseline则是其内部最后一个line box的baseline，而由于其设定为&lt;code&gt;vertical-align:baseline&lt;/code&gt;，child-1的baseline处在最下面，child-2和child-3的baseline均与child-1的baseline对齐&lt;/p&gt;

&lt;p&gt;增加child-3的内容：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/6.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;布局发生改变，child-1和child-2的baseline都对齐child-3的baseline了&lt;/p&gt;

&lt;h2 id=&quot;verticalalign_2&quot;&gt;vertical-align不同值之间的表现&lt;/h2&gt;

&lt;h3 id=&quot;baseline_4&quot;&gt;baseline&lt;/h3&gt;

&lt;p&gt;将子元素盒子的baseline与父盒子的baseline对齐。如果这个元素盒子没有baseline，将这个盒子的底margin边界与父盒子的baseline对齐&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From W3C: Align the baseline of the box with the baseline of the parent box. If the box does not have a baseline, align the bottom margin edge with the parent’s baseline.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;vertical-align默认就是baseline，所以这里会将子元素和父盒子的baseline对齐：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/7.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;middle&quot;&gt;middle&lt;/h3&gt;

&lt;p&gt;将子元素盒子的垂直中点与 父盒子的baseline加上父盒子的x-height的一半位置 对齐&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From W3C: Align the vertical midpoint of the box with the baseline of the parent box plus half the x-height of the parent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里子元素盒子的垂直中点还是比较容易确定的，父盒子的baseline之前也确定了，但这里需要通过x-height进行计算：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From W3C: The x-height is, roughly, the height of lowercase letters such as a, c, m, or o. Fonts that have the same size (and thus the same em) may vary wildly in the size of their lowercase letters&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其实x-height就是字体的x字母的高度&lt;/p&gt;

&lt;p&gt;为了方便，将内容换成”Xx”，由于X(无论大小写)下边界都是顶着baseline的，而小写字母”x”这种上下对称的字母，其中点所在的水平直线就是子元素中点所需要对齐的直线了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/8.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;texttop&quot;&gt;text-top&lt;/h3&gt;

&lt;p&gt;将盒子的顶端（margin-top边界）与父盒子的文本区域顶端对齐&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From W3C: Align the top of the box with the top of the parent’s content area&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里盒子的顶端（margin-top上边界）很好确定，而父盒子的文本区域顶端又是哪里？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/9.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;审查一下文本，可以看到，蓝色的区域上边界就是文本区域：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/10.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样就很好理解了，而可以看到对齐结果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/11.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;子元素盒子的margin-top上边界很好的和文本区域上边界对齐了&lt;/p&gt;

&lt;h3 id=&quot;textbottom&quot;&gt;text-bottom&lt;/h3&gt;

&lt;p&gt;将盒子的底端（margin-bottom边界）与父盒子的文本区域底端对齐&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From W3C: Align the bottom of the box with the bottom of the parent’s content area&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有了上面的text-top的实例，这里就很好理解了，不过换个方向罢了，将子元素的margin-bottom和文本区域的下边界对齐：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/12.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;sub&quot;&gt;sub&lt;/h3&gt;

&lt;p&gt;将子元素盒子的baseline降低，到适当的父盒子的下标位置&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From W3C: Lower the baseline of the box to the proper position for subscripts of the parent’s box.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;子元素的baseline已经确定了，就是其margin-bottom下边界，但是父盒子的下标位置不太好理解…首先需要了解下标这个概念，我们可以通过&lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;标签为文字添加下标，将&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;中的内容修改为&lt;code&gt;Gg&amp;lt;sub&amp;gt;Gg&amp;lt;/sub&amp;gt;&lt;/code&gt;，就会有如下效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/13.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;既然下标也是一段文字，其也有上述的三条线，文本区域上边界，文本区域下边界，baseline。这里是根据下标的baseline对齐的，也就是说，对齐下标中&lt;code&gt;G&lt;/code&gt;字母的底部:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/14.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;super&quot;&gt;super&lt;/h3&gt;

&lt;p&gt;将子元素盒子的baseline升高，到适当的父盒子的上标位置&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From W3C: Raise the baseline of the box to the proper position for superscripts of the parent’s box.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;与sub对应，super提升到上标内容的baseline处，首先通过&lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt;标签创建上标：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/15.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也是三条线，和上面基准一样，将子元素的baseline对齐上标的baseline：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/16.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;percentagelength&quot;&gt;percentage和length&lt;/h3&gt;

&lt;p&gt;首先看看percentage（百分比）：&lt;/p&gt;

&lt;p&gt;升高（正值）或降低（负值）子元素盒子，具体的升高/降低数值由父盒子的line-height的值乘以百分比值计算得出。如果百分比为0%，那么和&lt;code&gt;vertical-align:baseline&lt;/code&gt;没有区别&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From W3C: Raise (positive value) or lower (negative value) the box by this distance (a percentage of the ‘line-height’ value). The value ‘0%’ means the same as ‘baseline’.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个还是相当好理解的，就是相当于baseline升高或降低，具体数值为百分比乘以父盒子的line-height值，比如这里的例子，父盒子的line-height为200px，所以设定为25%的使用应当上移50px:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/17.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;并不是很直观，给它加上一个&lt;code&gt;transfrom: translate(0, 50px)&lt;/code&gt;（相对下移50px）,它又移到那个熟悉的位置了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/18.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来看看length：&lt;/p&gt;

&lt;p&gt;升高（正值）或降低（负值）子元素盒子。值为升高/降低的距离，如果为0，那么和&lt;code&gt;vertical-align:baseline&lt;/code&gt;没有区别&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From W3C: Raise (positive value) or lower (negative value) the box by this distance. The value ‘0cm’ means the same as ‘baseline’.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以我们最常用的px作为单位，设定&lt;code&gt;vertical-align:50px&lt;/code&gt;，效果就和上面百分比为25%效果一样了（200px * 25% = 50px）。这里就不做例子了&lt;/p&gt;

&lt;h3 id=&quot;verticalalignline_box&quot;&gt;vertical-align与line box&lt;/h3&gt;

&lt;p&gt;当&lt;code&gt;vertical-align&lt;/code&gt;设置为top和bottom时，其就不是按照baseline进行定位了，而是根据line box进行定位。子元素盒子的顶部和底部也就是其上下margin外边界。而line box则是IFC中定义了一套规范，其高度计算如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;计算出line box内部的每个内联盒子的高度。对于替换元素、inline-block元素和inline-table元素，他们的高度是整个margin box的高度。而对于内联盒子，值是他们的line-height属性。&lt;/li&gt;

&lt;li&gt;内联盒子在垂直方向上根据他们的vertival-align属性来分布。当值为top或bottom时，他们必须以最小化line box高度的方式排布。如果那个盒子足够高，就会撑开line box&lt;/li&gt;

&lt;li&gt;line box的高度是最上面盒子的顶端到最下面盒子的底端的值&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;比如之前的例子，父盒子的&lt;code&gt;line-height&lt;/code&gt;为200px，而其中的&lt;code&gt;span&lt;/code&gt;包含文字，所以根据第一条规则将line box的高度撑开到200px&lt;/p&gt;

&lt;p&gt;如果设定子元素&lt;code&gt;height: 200px;&lt;/code&gt;,&lt;code&gt;vertical-align: baseline&lt;/code&gt;，那么可以看到整个父容器被撑开：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/19.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于根据上面的&lt;code&gt;vertical-align: baseline&lt;/code&gt;进行垂直定位，规则并没有变。而由于规则3，line box的高度需要包含所有的内容，所以整个line box被撑开&lt;/p&gt;

&lt;p&gt;而如果在后面加一个元素：&lt;/p&gt;

&lt;pre class=&quot;xml&quot;&gt;&lt;code class=&quot;xml&quot;&gt;
&amp;lt;div class=&amp;quot;ctn-block&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;child1&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;span&amp;gt;Gg&amp;lt;/span&amp;gt;
    &amp;lt;div class=&amp;quot;big&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;css21&quot;&gt;&lt;code class=&quot;css21&quot;&gt;
.ctn-block .big {
    display: inline-block;
    width: 100px;
    height: 400px;
    vertical-align: top;
    background-color: antiquewhite;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/20.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于规则2的计算，line box被这个big元素撑开，达到400px，如果我们将其降低到200px：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/21.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;则会由于其高度不够已有的高度，line box没有被撑开，这个big元素由于&lt;code&gt;vertical-align: top&lt;/code&gt;而在line box顶端显示&lt;/p&gt;

&lt;h3 id=&quot;top&quot;&gt;top&lt;/h3&gt;

&lt;p&gt;将子元素盒子的顶部和其所在的line box顶部对齐&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From W3C: Align the top of the aligned subtree with the top of the line box.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;由之前所说，&lt;code&gt;vertical-align:top&lt;/code&gt;将会让子元素盒子顶部与line box顶部对齐，而如果line box的高度小于子元素的高度，line box将会被撑开。我们先用一个高度较高的元素撑开line box，然后看看效果：&lt;/p&gt;

&lt;pre class=&quot;xml&quot;&gt;&lt;code class=&quot;xml&quot;&gt;
&amp;lt;div class=&amp;quot;ctn-block&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;child1&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;big&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;css21&quot;&gt;&lt;code class=&quot;css21&quot;&gt;
.ctn-block .child1 {
    display: inline-block;
    width: 100px;
    height: 100px;
    margin: 10px 0;
    vertical-align: top;
    background-color: aliceblue;
}
.ctn-block .big {
    display: inline-block;
    width: 100px;
    height: 200px;
    vertical-align: top;
    background-color: antiquewhite;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/22.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到，big子元素撑开了line box，而child1的margin-top外边界紧贴在line box的顶端&lt;/p&gt;

&lt;h3 id=&quot;bottom&quot;&gt;bottom&lt;/h3&gt;

&lt;p&gt;将子元素盒子的底部和其所在的line box底部对齐&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From W3C: Align the bottom of the aligned subtree with the bottom of the line box.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;和top类似，由于big用于撑开line box，可以不必修改其&lt;code&gt;vertical-align&lt;/code&gt;的值，仅修改child1为&lt;code&gt;vertical-align: bottom;&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/23.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;verticalalign_middle&quot;&gt;vertical-align: middle让元素下移而不居中的问题分析&lt;/h2&gt;

&lt;h3 id=&quot;&quot;&gt;问题&lt;/h3&gt;

&lt;p&gt;现在有三个inline-block块，高度分别为100px，200px，300px，想让高度为100px的块垂直居中，于是写出了如下代码：&lt;/p&gt;

&lt;pre class=&quot;xml&quot;&gt;&lt;code class=&quot;xml&quot;&gt;
&amp;lt;div class=&amp;quot;ctn-block&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;child child-1&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;child child-2&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class=&amp;quot;child child-3&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;css21&quot;&gt;&lt;code class=&quot;css21&quot;&gt;
.ctn-block {
    display: inline-block;
    background-color: #bbb;
}

.ctn-block .child {
    display: block;
    width: 100px;
    background-color: aliceblue;
}

.ctn-block .child-1 {
    height: 100px;
    vertical-align: middle;
}
.ctn-block .child-2 {
    height: 200px;
}
.ctn-block .child-3 {
    height: 300px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果却只能得到如下效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/24.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;child-1元素下移了，但是却没有居中。&lt;/p&gt;

&lt;h3 id=&quot;_2&quot;&gt;原因&lt;/h3&gt;

&lt;p&gt;从上面可以知道，&lt;code&gt;vertical-align: middle&lt;/code&gt;的定位方式是：将子元素盒子的垂直中点与 父盒子的baseline加上父盒子的x-height的一半位置 对齐。&lt;/p&gt;

&lt;p&gt;子元素的垂直中点还是比较好算的，而父盒子的baseline加上父盒子的x-height一半位置又是什么呢？&lt;/p&gt;

&lt;p&gt;首先计算父盒子的baseline：三个子元素的baseline走在一条直线上，就是child-2和child-3的底部&lt;/p&gt;

&lt;p&gt;然后加上父盒子的x-height：由于默认font-size是16px，而&lt;code&gt;font-family: sans-serif&lt;/code&gt;，而其x-height的一半大概3-4px&lt;/p&gt;

&lt;p&gt;综上，大致按照如下方式对齐：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://skyinlayer.com/img/verticalalign/25.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;_3&quot;&gt;解决&lt;/h3&gt;

&lt;p&gt;一种方式是将最高的元素设为&lt;code&gt;vertical-align: middle&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后将想要居中的也设定为&lt;code&gt;vertical-align: middle&lt;/code&gt;,其他的根据需要设定&lt;code&gt;vertical-align: top/bottom&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;由于设定为&lt;code&gt;vertical-align: middle&lt;/code&gt;后，这个元素的对于line box来说，baseline就是其中线。而其他元素全部设定为&lt;code&gt;vertical-align: top/bottom&lt;/code&gt;后，他们不影响line box的baseline，所以再将需要设定垂直居中的元素也设定为&lt;code&gt;vertical-align: middle&lt;/code&gt;，他们的baseline必然在最高元素的baseline之上，所以会被强制下移，进行居中&lt;/p&gt;

&lt;h3 id=&quot;_4&quot;&gt;衍生的一种可行的垂直居中方案&lt;/h3&gt;

&lt;p&gt;为父容器设定一个伪元素&lt;code&gt;::after&lt;/code&gt;，其高度为父元素的高度，&lt;code&gt;display:inline-block&lt;/code&gt;，将其设定为&lt;code&gt;vertical-align: middle&lt;/code&gt;即可撑开line box，同时line box的baseline为父元素高度一半的位置。然后设定子元素&lt;code&gt;vertical-align: middle&lt;/code&gt;，即可实现居中&lt;/p&gt;

&lt;pre class=&quot;xml&quot;&gt;&lt;code class=&quot;xml&quot;&gt;
&amp;lt;div class=&amp;quot;g-ctn&amp;quot;&amp;gt;
    &amp;lt;div class=&amp;quot;g-mn&amp;quot;&amp;gt;
        &amp;lt;p&amp;gt;这是内容区&amp;lt;/p&amp;gt;
        &amp;lt;p style=&amp;quot;font-size: 3em;&amp;quot;&amp;gt;这是一大串的废话这是一大串的废话这是一大串的废话这是一大串的废话这是一大串的废话这是一大串的废话这是一大串的废话这是一大串的废话这是一大串的废话这是一大串的废话这是一大串的废话这是一大串的废话这是一大串的废话这是一大串的废话这是一大串的废话这是一大串的废话这是一大串的废话这是一大串的废话这是一大串的废话这是一大串的废话这是一大串的废话&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;!--[if lt IE 8]&amp;gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;![endif]--&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre class=&quot;css21&quot;&gt;&lt;code class=&quot;css21&quot;&gt;
.g-ctn {
    height: 800px;
    width: 100%;
    text-align: center;
}

.g-ctn:after,.g-ctn span{
    display:inline-block;
    *display:inline;
    *zoom:1;
    width:0;
    height:100%;
    vertical-align:middle;
}
.g-ctn:after{
    content:'';
}

.g-ctn .g-mn{
    display:inline-block;
    *display:inline;
    *zoom:1;
    width: 80%;
    max-height: 80%;
    max-width: 1000px;
    vertical-align:middle;
    overflow: auto;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里需要使用一些hack，由于IE8-不支持&lt;code&gt;::after&lt;/code&gt;伪元素，所以需要一个span来替代。而display: inline-block亦需要hack。&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>JavaScript in-between原理与应用</title>
      <link>http://incorporated.sendtoinc.com/2014/05/12/javascript-in-between/</link>
      <pubDate>Mon, 12 May 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://incorporated.sendtoinc.com/2014/05/12/javascript-in-between</guid>
      <description>&lt;h2 id=&quot;&quot;&gt;简介&lt;/h2&gt;

&lt;p&gt;本文将介绍in-between的概念，以及in-between类库&lt;a href=&quot;https://github.com/sole/tween.js&quot;&gt;Tween.js&lt;/a&gt;的实现。接着，我将介绍一些常见的in-between的好玩的用法。最后，我还将介绍jQuery Effects对in-between的应用。&lt;/p&gt;

&lt;h2 id=&quot;_2&quot;&gt;目录&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#什么是tween&quot;&gt;什么是tween&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#Tween.js&quot;&gt;Tween.js&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#有趣的应用&quot;&gt;有趣的应用&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#jQuery中的Tween&quot;&gt;jQuery中的Tween&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div id='什么是tween' /&gt;
&lt;h2 id=&quot;tween&quot;&gt;什么是tween&lt;/h2&gt;

&lt;p&gt;tween是&lt;a href=&quot;http://en.wikipedia.org/wiki/Inbetweening&quot;&gt;in-between&lt;/a&gt;的另一种写法。一个tween指的是&lt;strong&gt;让对象的属性值平滑变化的一个过程&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;那么，什么是平滑变化？假设在9点10分的时候，对象&lt;code&gt;foo.a&lt;/code&gt;的值为0。在9点20分的时候，我希望它的值变成1。如果&lt;code&gt;foo.a&lt;/code&gt;是非平滑变化的，在9点10分到9点20分（除9点20分外）之间它依然是0，直到9点20分那一刻来临才变成1。如果它是平滑变化的，那么它应该在9点10分到9点20分之间的每一个时间点上的值都不同，并且是根据一定函数规律变化的。&lt;/p&gt;

&lt;p&gt;tween就是这个平滑变化的过程。&lt;/p&gt;

&lt;p&gt;&lt;img alt='平滑变化示意图' class='img-responsive' src='/images/2014-05-12-javascript-in-between/1.png' /&gt;&lt;/p&gt;

&lt;p&gt;这就好比一个人溜冰一样。你要从点a滑到点b，你是不可能一开始一直呆在a点，直到最后通过&lt;a href=&quot;http://www.baike.com/wiki/%E8%B6%85%E6%97%B6%E7%A9%BA%E8%BD%AC%E6%8D%A2&quot;&gt;超时空转换&lt;/a&gt;直接把自己变到b点的。要从a点滑到b点，你必须经过一个路径，从而&lt;strong&gt;平滑地&lt;/strong&gt;从a点滑到b点。&lt;/p&gt;
&lt;div id='Tween.js' /&gt;
&lt;h2 id=&quot;tweenjs&quot;&gt;Tween.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sole/tween.js&quot;&gt;Tween.js&lt;/a&gt;是用来在JavaScript当中实现tween的一个工具库。我们接下来讲解它的实现。在实际应用中，我们一般自己编写自己的Tween类，或者复制并修改开源工具库中的Tween类，因为&lt;strong&gt;自己编写的总是最符合自己业务需求的&lt;/strong&gt;。大部分Tween工具库包含了很多你用不到的东西，在后面我会提到。&lt;/p&gt;

&lt;p&gt;为了使用Tween.js，你需要先有一个待变化的对象。在下面的例子里，我们将对象&lt;code&gt;foo&lt;/code&gt;初始化为&lt;code&gt;{a: 1}&lt;/code&gt;（初始状态），并要求它在3000毫秒后变成&lt;code&gt;{a: 4}&lt;/code&gt;（目标状态）。变化过程采用线性变化，即每个时间点的变化速率相等。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;foo&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='nx'&gt;a&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;},&lt;/span&gt; &lt;span class='cm'&gt;/*初始状态*/&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;   &lt;span class='nx'&gt;tween&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;TWEEN&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Tween&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;foo&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;     &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;to&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt;&lt;span class='nx'&gt;a&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='cm'&gt;/*目标状态*/&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;3000&lt;/span&gt; &lt;span class='cm'&gt;/*变化时间*/&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;     &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;start&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt; 
&lt;span class='lineno'&gt; 6&lt;/span&gt;   &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;animate&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;foo&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;a&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;       &lt;span class='nx'&gt;requestAnimationFrame&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;animate&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;     &lt;span class='nx'&gt;TWEEN&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;update&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;     &lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;foo&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;   &lt;span class='p'&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你查看Chrome Inspector（或者Firefox下的Firebug插件），你将会看到控制台中输出了下面的数据&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Object {a: 1.0001740000443533} 
Object {a: 1.0924470000900328} 
Object {a: 1.1527340000029653} 
Object {a: 1.1701550000580028} 
Object {a: 1.185736000072211}
... ...&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;_3&quot;&gt;喘口气&lt;/h4&gt;

&lt;p&gt;回过头来，我们来稍微解释一下上面的代码段。首先我们创建一个&lt;code&gt;foo&lt;/code&gt;对象的tween&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;foo&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='nx'&gt;a&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;},&lt;/span&gt; &lt;span class='cm'&gt;/*初始状态*/&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;   &lt;span class='nx'&gt;tween&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;TWEEN&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Tween&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;foo&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来，我们需要将确认foo对象的目标状态，在这里是&lt;code&gt;{a: 4}&lt;/code&gt;，并且要求它正好在3000毫秒后到达目标状态。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='nx'&gt;tween&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;to&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt;&lt;span class='nx'&gt;a&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='cm'&gt;/*目标状态*/&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;3000&lt;/span&gt; &lt;span class='cm'&gt;/*变化时间*/&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后，我们需要激活这个tween，代表开始变化。调用&lt;code&gt;tween.start()&lt;/code&gt;的时间就是开始变化的时间时间戳，除非你调用了&lt;code&gt;tween.delay()&lt;/code&gt;方法。你还可以给&lt;code&gt;tween.start(time)&lt;/code&gt;传入一个额外参数&lt;code&gt;time&lt;/code&gt;，直接指定开始变化的时间戳。我们可以通过源码验证这点&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='nx'&gt;_startTime&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;time&lt;/span&gt; &lt;span class='o'&gt;!==&lt;/span&gt; &lt;span class='kc'&gt;undefined&lt;/span&gt; &lt;span class='o'&gt;?&lt;/span&gt; &lt;span class='nx'&gt;time&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='k'&gt;typeof&lt;/span&gt; &lt;span class='nb'&gt;window&lt;/span&gt; &lt;span class='o'&gt;!==&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;undefined&amp;#39;&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='nb'&gt;window&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;performance&lt;/span&gt; &lt;span class='o'&gt;!==&lt;/span&gt; &lt;span class='kc'&gt;undefined&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class='nb'&gt;window&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;performance&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;now&lt;/span&gt; &lt;span class='o'&gt;!==&lt;/span&gt; &lt;span class='kc'&gt;undefined&lt;/span&gt; &lt;span class='o'&gt;?&lt;/span&gt; &lt;span class='nb'&gt;window&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;performance&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;now&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nb'&gt;Date&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;now&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt; &lt;span class='nx'&gt;_startTime&lt;/span&gt; &lt;span class='o'&gt;+=&lt;/span&gt; &lt;span class='nx'&gt;_delayTime&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;值得注意的是，在没有delay和指定time参数的情况下，Tween.js将优先使用&lt;code&gt;window.performance.now()&lt;/code&gt;获取当前的时间戳，这样的时间戳是高精度时间戳（精度为10μs）。这是HTML5当中的新增的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp&quot;&gt;DOMHighResTimeStamp API&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&quot;_4&quot;&gt;询问进度&lt;/h4&gt;

&lt;p&gt;我们通过&lt;code&gt;animate&lt;/code&gt;函数来轮询&lt;code&gt;foo&lt;/code&gt;对象目前的状态。采用&lt;code&gt;requestAnimationFrame&lt;/code&gt;进行异步调用，效率会更高。你也可以选择用&lt;code&gt;setTimeout&lt;/code&gt;，jQuery就是这样做的。&lt;/p&gt;

&lt;p&gt;在询问的时候，你首先需要调用&lt;code&gt;TWEEN.update()&lt;/code&gt;更新所有的tween。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;animate&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;   &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;foo&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;a&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='mi'&gt;4&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt;     &lt;span class='nx'&gt;requestAnimationFrame&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;animate&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt;   &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt;   &lt;span class='nx'&gt;TWEEN&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;update&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt;6&lt;/span&gt;   &lt;span class='nx'&gt;console&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;log&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;foo&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;7&lt;/span&gt; &lt;span class='p'&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;_5&quot;&gt;精髓&lt;/h4&gt;

&lt;p&gt;使用in-between的精髓就在于，它将属性的变化和询问分离。如果你熟悉MVC，属性的变化就好像是MVC里面的Model，而询问就好像是Controller，最后我们输出到控制台（Console）就好像是View。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“历史总是惊人地相似”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;分离带来的好处是什么呢？它使得我们可以统一管理所有页面上的Tween，而不用关心它们究竟用于什么途径。接下来，我们通过实践来证明这一点。&lt;/p&gt;
&lt;div id='有趣的应用' /&gt;
&lt;h2 id=&quot;_6&quot;&gt;有趣的应用&lt;/h2&gt;

&lt;p&gt;首先你需要先将Tween.js的GitHub代码仓库复制到本地&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:sole/tween.js.git
cd tween.js&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在&lt;code&gt;examples&lt;/code&gt;目录里面有许多有趣的应用，我们只看其中第二个例子&lt;code&gt;01_bars.html&lt;/code&gt;。在这个例子中，有1000个彩条在屏幕上水平移动。每个彩条都对应两个tween，一个是从出发位置到目标位置的，一个是返回出发位置的。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;tween&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;TWEEN&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Tween&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;elem&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;   &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;to&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;endValue&lt;/span&gt; &lt;span class='p'&gt;},&lt;/span&gt; &lt;span class='mi'&gt;4000&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;   &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;delay&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;Math&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;random&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='mi'&gt;1000&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;   &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;onUpdate&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;updateCallback&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;   &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;easing&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;TWEEN&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Easing&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Back&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Out&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;   &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;start&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt; 
&lt;span class='lineno'&gt; 8&lt;/span&gt; &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;tweenBack&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;TWEEN&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Tween&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;elem&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kc'&gt;false&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;   &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;to&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;startValue&lt;/span&gt;&lt;span class='p'&gt;},&lt;/span&gt; &lt;span class='mi'&gt;4000&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;   &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;delay&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;Math&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;random&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='mi'&gt;1000&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;   &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;onUpdate&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;updateCallback&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;   &lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;easing&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;TWEEN&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Easing&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Elastic&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;InOut&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; 
&lt;span class='lineno'&gt;14&lt;/span&gt; &lt;span class='nx'&gt;tween&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;chain&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;tweenBack&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt; &lt;span class='nx'&gt;tweenBack&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;chain&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;tween&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tween.js支持事件&lt;code&gt;onUpdate&lt;/code&gt;，每当&lt;code&gt;TWEEN.update()&lt;/code&gt;被调用的时候，会触发所有tween的&lt;code&gt;update&lt;/code&gt;事件。另外，你还能为每个tween设置easing function。如果你不清楚什么是easing function，可以看我昨天写的文章&lt;a href=&quot;/2014/05/11/getting-started-with-implementations-of-script-based-animations/&quot;&gt;《JavaScript动画实现初探》&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;由于Tween.js和其他支持in-between的类库都含有大量预置的easing function，其中有很多我们用不到的。所以，就像本文前面提到的一样，我们经常需要定制自己的Tween类库。&lt;/p&gt;

&lt;p&gt;这里还用到了chaining来循环动画，&lt;code&gt;tween&lt;/code&gt;结束后将启动&lt;code&gt;tweenBack&lt;/code&gt;，&lt;code&gt;tweenBack&lt;/code&gt;启动后会再次启动&lt;code&gt;tween&lt;/code&gt;。&lt;/p&gt;
&lt;div id='jQuery中的Tween' /&gt;
&lt;h2 id=&quot;jquerytween&quot;&gt;jQuery中的Tween&lt;/h2&gt;

&lt;p&gt;jQuery中也采用了Tween来管理动画的效果进度。在jQuery 1.8之后，引入了Tween来管理动画效果进度，原先的&lt;code&gt;jQuery.fx&lt;/code&gt;和&lt;code&gt;Tween.prototype.init&lt;/code&gt;是相同的。之所以保留&lt;code&gt;jQuery.fx&lt;/code&gt;，是为了兼容以前的插件。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='nx'&gt;jQuery&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;fx&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;Tween&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;init&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于动画中需要变化的每一个属性，jQuery都为其创建一个Tween。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='nx'&gt;jQuery&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;map&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;props&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;createTween&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;animation&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt; 
&lt;span class='lineno'&gt; 3&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;createTween&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;value&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;prop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;animation&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;   &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;tween&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;     &lt;span class='nx'&gt;collection&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;tweeners&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt; &lt;span class='nx'&gt;prop&lt;/span&gt; &lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt; &lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;concat&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;tweeners&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;*&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;),&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;     &lt;span class='nx'&gt;index&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;     &lt;span class='nx'&gt;length&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;collection&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;length&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;   &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;index&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='nx'&gt;length&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;index&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;     &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;tween&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;collection&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt; &lt;span class='nx'&gt;index&lt;/span&gt; &lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='nx'&gt;call&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;animation&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;prop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;value&lt;/span&gt; &lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;       &lt;span class='c1'&gt;// we&amp;#39;re done with this property&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;       &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;tween&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;     &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt;   &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;14&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每隔一段时间，jQuery要求每隔DOM节点的tween根据当前进度更新style。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='k'&gt;for&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;index&lt;/span&gt; &lt;span class='o'&gt;&amp;lt;&lt;/span&gt; &lt;span class='nx'&gt;length&lt;/span&gt; &lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;index&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;   &lt;span class='nx'&gt;animation&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;tweens&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt; &lt;span class='nx'&gt;index&lt;/span&gt; &lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='nx'&gt;run&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;percent&lt;/span&gt; &lt;span class='cm'&gt;/*当前动画的时间进度*/&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jQuery当中并没有用&lt;code&gt;requestAnimationFrame&lt;/code&gt;一直去询问，而是采用&lt;code&gt;setTimeout&lt;/code&gt;每隔13ms去询问，然后更新界面。13ms是一个平衡点，不会太长，也不会太短。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt; &lt;span class='nx'&gt;jQuery&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;fx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;start&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;   &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='nx'&gt;timerId&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt;     &lt;span class='nx'&gt;timerId&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;setInterval&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;jQuery&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;fx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;tick&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;jQuery&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;fx&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;interval&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='lineno'&gt;4&lt;/span&gt;   &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt;5&lt;/span&gt; &lt;span class='p'&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;_7&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;本文介绍了in-between，并介绍了它的原理以及一些应用。in-between主要用在页面效果动画，数据可视化当中。你可以让它和一些著名的数据可视化库（如&lt;a href=&quot;http://d3js.org/&quot;&gt;d3.js&lt;/a&gt;）协同工作。你可以查看Tween.js的examples，学到更多相关的应用。&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>页面设计策略</title>
      <link>http://incorporated.sendtoinc.com/2014/05/11/page-design-strategies/</link>
      <pubDate>Sun, 11 May 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://incorporated.sendtoinc.com/2014/05/11/page-design-strategies</guid>
      <description>&lt;p&gt;前端开发，最重要的是让更多的人访问到我们的页面，并给他们优秀的用户体验。但在这美丽而残酷的世界，总有那么一些事情不尽如人意，浏览器之间差异便是其中一个。如今网页开发者和网页设计师们需要一个优秀的设计策略来引导跨浏览器、跨设备网页开发。这里就介绍了三种主流的设计策略。&lt;/p&gt;

&lt;h2 id=&quot;&quot;&gt;浏览器兼容设计策略&lt;/h2&gt;

&lt;h3 id=&quot;_2&quot;&gt;优雅降级(适度退化)&lt;/h3&gt;

&lt;p&gt;一般情况下，我们总是希望自己的网页能在所有的浏览器中能正常工作，但事实总是那么的残酷（因为M记的IE）。一种比较常见的策略，名叫优雅降级(也叫适度退化)。先使得网页能在所有的现代浏览器中正常工作（不一定是最新，一般是当前最新版本的上一个发行版本），然后通过代码来监测网页能否在用户使用的老式浏览器中正常工作。比如IE自身的盒子模型问题，开发者就会根据具体的IE版本实现来进行降级。也就是说，如果使用优雅降级的策略，我们需要实现整个网页的所有功能和效果，为无法支持所有功能的浏览器专门去制定一些候选方案，关注其中的核心功能，在老式浏览器上降低用户体验而保持核心功能能够正常工作。&lt;/p&gt;

&lt;h3 id=&quot;_3&quot;&gt;渐进增强&lt;/h3&gt;

&lt;p&gt;渐进增强的策略与优雅降级相反。首先从能被所有浏览器所支持的基本功能开始，逐步的去添加现代浏览器所支持的功能。用户体验中内容为王，在网页实现时最重要的就是将主要内容展现给用户。渐进增强就很符合这个理念。&lt;/p&gt;

&lt;p&gt;要实现渐进增强，首先需要为所有设备准备好清晰的语义化HTML以及完善的内容，再通过无侵入的方式想页面中增加无害于基础浏览器的额外样式和功能。这样当浏览器更新换代时，就会不断提升用户体验&lt;/p&gt;

&lt;h3 id=&quot;_4&quot;&gt;不要为了兼容舍弃新技术&lt;/h3&gt;

&lt;p&gt;有很多人整日只关注老式浏览器上的表现情况，和他们一谈HTML5和CSS3，他们的态度是：“IE6（7）支持吗？不支持用（学）它干嘛”，我很鄙夷这种想法。我们不应该仅仅为了照顾那些老古董（老式浏览器用户），而阻碍大批量现代浏览器用户享受CSS3和HTML5所带来的优秀视觉体验和交互设计。同时浏览器本身也会随着时间而变得更加强大，老式浏览器所占的份额也越来越小，没理由不去使用CSS3和HTML5。&lt;/p&gt;

&lt;h2 id=&quot;_5&quot;&gt;响应式页面设计策略&lt;/h2&gt;

&lt;h3 id=&quot;_6&quot;&gt;移动先行&lt;/h3&gt;

&lt;p&gt;在响应式页面设计时我们需要考虑的几个问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;允许更多的人访问我们的网页（目前77%的人拥有手机，2011年出售的手机中85%安装了浏览器）&lt;/li&gt;

&lt;li&gt;让设计者关注核心的内容和功能（如果你失去了屏幕大小的80%你会怎么做？）&lt;/li&gt;

&lt;li&gt;让设计者关注新技术，热爱创新（地理位置、触碰事件等等）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;响应式页面的核心内容：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;根据设备的屏幕大小流式布局&lt;/li&gt;

&lt;li&gt;伸缩的图片和媒体保证在任何屏幕大小中完整显示&lt;/li&gt;

&lt;li&gt;通过为媒体查询增加断点&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如今，随着移动互联网的发展，移动设备（智能手机、平板电脑等）所占有的比重越来越重，这也决定了视口大小的多种多样。同时随着传统数字设备（台式机、笔记本电脑、上网本）的发展，其视口大小也在不断扩大。这也导致了需要兼容的最大视口与最小视口的大小的差距逐渐增大。响应式WEB设计业应运而生。我们的目标就是（没有蛀牙！），让我们的页面兼容更多的设备。但是需要注意的是，将页面做成响应式页面只是权宜之计，最好的方法（预算够）是为移动端设备专门开发一个页面。这样可以为移动端设备做一些针对性的优化。&lt;/p&gt;

&lt;p&gt;移动先行就是一种响应式页面设计策略，采用渐进增强的思想。最初只是为移动端的小视口设备（智能手机等）展现核心内容和功能，然后通过媒体查询为中视口设备（平板电脑等）添加更多的功能和视觉效果，再在大视口传统数字设备（台式机、笔记本电脑）上添加所有的内容和更加复杂的视觉效果，最后为了兼容超大视口（高分屏），可以适当加大原有内容的显示效果，并同时保持内容居中。&lt;/p&gt;

&lt;h3 id=&quot;_7&quot;&gt;参考文献&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://fatesinger.com/764.html&quot;&gt;渐进增强与优雅降级&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://bradfrostweb.com/blog/web/mobile-first-responsive-web-design/&quot;&gt;Mobile-First Responsive Web Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    
    
    <item>
      <title>JavaScript动画实现初探</title>
      <link>http://incorporated.sendtoinc.com/2014/05/11/getting-started-with-implementations-of-script-based-animations/</link>
      <pubDate>Sun, 11 May 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://incorporated.sendtoinc.com/2014/05/11/getting-started-with-implementations-of-script-based-animations</guid>
      <description>&lt;h2 id=&quot;&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;现如今，许多页面上均有一些动画效果。适当的动画效果可以在一定程度上提高页面的美观度，具有提示效果的动画可以增强页面的易用性。&lt;/p&gt;

&lt;p&gt;实现页面动画的途径有两种。一种是通过操作JavaScript间接操作CSS样式，每隔一段时间更新一次；一种是直接通过CSS定义动画。第二种方法在CSS3成熟之后被广泛采用。在本文中，我们讨论第一种方法的原理和实现。&lt;/p&gt;

&lt;h2 id=&quot;_2&quot;&gt;目录&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#JavaScript动画实现原理&quot;&gt;JavaScript动画实现原理&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;#easing&quot;&gt;easing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span id='JavaScript动画实现原理' /&gt;&lt;/p&gt;

&lt;h2 id=&quot;javascript&quot;&gt;JavaScript动画实现原理&lt;/h2&gt;

&lt;p&gt;首先我们需要知道两个重要的概念，动画时间进程和动画效果进程。&lt;/p&gt;

&lt;p&gt;动画时间进程指从时间上看动画的完成度，是一个[0, 1]之间的数字。假设动画于时间戳&lt;code&gt;t1&lt;/code&gt;开始，要在&lt;code&gt;t2&lt;/code&gt;结束，当前时间戳为&lt;code&gt;t&lt;/code&gt;，那么该动画目前的时间进程为&lt;code&gt;(t-t1)/(t2-t1)&lt;/code&gt;。如果你不能理解，我建议你用纸笔画出来。理解这一概念对理解本文至关重要。&lt;/p&gt;

&lt;p&gt;动画效果进程指&lt;strong&gt;被动画的属性值&lt;/strong&gt;当前的增量。假设我们要将&lt;code&gt;#el&lt;/code&gt;元素的CSS &lt;code&gt;left&lt;/code&gt; 属性从&lt;code&gt;100px&lt;/code&gt;变到&lt;code&gt;200px&lt;/code&gt;，当前已经变到了&lt;code&gt;130px&lt;/code&gt;，那么该动画目前的效果进程为&lt;code&gt;130px - 100px = 30px&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;假设动画时间进程和动画效果进程都是线性的。那么如果知道了动画时间进程，一定可以得到动画效果进程。&lt;/p&gt;

&lt;p&gt;&lt;img alt='' class='img-responsive' src='/images/2014-05-11-getting-started-with-implementations-of-script-based-animations/1.png' /&gt;&lt;/p&gt;

&lt;p&gt;根据这个解释，我们很快可以编写出一个线性的动画。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;begin&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='c1'&gt;// 开始动画的时间&lt;/span&gt;
        &lt;span class='nx'&gt;el&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;start&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;end&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;duration&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; 
      &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;INTERVAL&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;13&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

      &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;now&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nb'&gt;Date&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;getTime&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;

      &lt;span class='cm'&gt;/**&lt;/span&gt;
&lt;span class='cm'&gt;       * 执行一步动画（更新属性）&lt;/span&gt;
&lt;span class='cm'&gt;       */&lt;/span&gt;
      &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;_animLeft&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;pos&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;now&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='nx'&gt;begin&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;/&lt;/span&gt; &lt;span class='nx'&gt;duration&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;pos&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;=&lt;/span&gt; &lt;span class='mf'&gt;1.0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
          &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='kc'&gt;false&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='p'&gt;}&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='o'&gt;!!&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;el&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;style&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;left&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;start&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;end&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='nx'&gt;start&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='nx'&gt;pos&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;

      &lt;span class='cm'&gt;/**&lt;/span&gt;
&lt;span class='cm'&gt;       * 对一个DOM执行动画，left从_start到_end，执行时间为&lt;/span&gt;
&lt;span class='cm'&gt;       * _duration毫秒。&lt;/span&gt;
&lt;span class='cm'&gt;       * &lt;/span&gt;
&lt;span class='cm'&gt;       * @param  {object} _el       要执行动画的DOM节点&lt;/span&gt;
&lt;span class='cm'&gt;       * @param  {integer} _start   left的起始值&lt;/span&gt;
&lt;span class='cm'&gt;       * @param  {integer} _end     left的最终值&lt;/span&gt;
&lt;span class='cm'&gt;       * @param  {integer} _duration  动画执行时间&lt;/span&gt;
&lt;span class='cm'&gt;       */&lt;/span&gt;
      &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;animLeft&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;_el&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;_start&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;_end&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;_duration&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;stopped&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kc'&gt;false&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='nx'&gt;begin&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;now&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
        &lt;span class='nx'&gt;el&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;_el&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='nx'&gt;start&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;_start&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='nx'&gt;end&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;_end&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='nx'&gt;duration&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;_duration&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='mi'&gt;1000&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

        &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;step&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
          &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;_animLeft&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='nx'&gt;setTimeout&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;step&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;INTERVAL&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
          &lt;span class='p'&gt;}&lt;/span&gt;
        &lt;span class='p'&gt;};&lt;/span&gt;
        &lt;span class='nx'&gt;setTimeout&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;step&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;

      &lt;span class='nb'&gt;window&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;animLeft&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;animLeft&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;})();&lt;/span&gt;

    &lt;span class='nx'&gt;animLeft&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;
      &lt;span class='nb'&gt;document&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;getElementById&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;el&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt;
      &lt;span class='mi'&gt;100&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
      &lt;span class='mi'&gt;200&lt;/span&gt;
    &lt;span class='p'&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://jsbin.com/fugey/1/edit&quot;&gt;JSBin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span id='easing' /&gt;&lt;/p&gt;

&lt;h2 id=&quot;easing&quot;&gt;easing&lt;/h2&gt;

&lt;p&gt;很多时候，我们需要的动画并非线性的。所谓非线性，从直观上看，就是动画速度随着时间会产生变化。那么如何实现变速的动画呢？&lt;/p&gt;

&lt;p&gt;由前所述，我们知道通过控制动画的时间进程就相当于控制动画的效果进程。随着真实世界的时间进程推移，动画的时间进程跟着推移，从而控制动画的效果进程推移。那么，我们可以通过修改真实世界的时间进程和动画的时间进程间的映射关系，从而控制动画进程。如果你感到困惑，没关系，请看下图：&lt;/p&gt;

&lt;p&gt;&lt;img alt='' class='img-responsive' src='/images/2014-05-11-getting-started-with-implementations-of-script-based-animations/2.png' /&gt;&lt;/p&gt;

&lt;p&gt;这是线性动画中，真实世界的时间进程和动画进程的映射关系。接下来，我们将其进行变换&lt;/p&gt;

&lt;p&gt;&lt;img alt='' class='img-responsive' src='/images/2014-05-11-getting-started-with-implementations-of-script-based-animations/3.png' /&gt;&lt;/p&gt;

&lt;p&gt;这条曲线实际上是函数&lt;code&gt;y = x * x&lt;/code&gt;的图像。可以看到，两个曲线的定义域和值域并没有变化。曲线的斜率就是动画的速率。接下来我们将两张图重叠在一起做一个对比。&lt;/p&gt;

&lt;p&gt;&lt;img alt='' class='img-responsive' src='/images/2014-05-11-getting-started-with-implementations-of-script-based-animations/4.png' /&gt;&lt;/p&gt;

&lt;p&gt;在真实世界的时间进行到&lt;code&gt;x0&lt;/code&gt;的时候，动画进程原本应该进行到&lt;code&gt;y0&lt;/code&gt;，在进行变换之后，只进行到&lt;code&gt;y1&lt;/code&gt;。到最后，百川归海，两条线交汇于点(1, 1)。这里，&lt;code&gt;y = x * x&lt;/code&gt;是&lt;strong&gt;变换函数（easing function）&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;我们修改一下上面的例子，让动画变成非线性的。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;    &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;ease&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;time&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;time&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='nx'&gt;time&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;

    &lt;span class='cm'&gt;/**&lt;/span&gt;
&lt;span class='cm'&gt;     * 执行一步动画（更新属性）&lt;/span&gt;
&lt;span class='cm'&gt;     */&lt;/span&gt;
    &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;_animLeft&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;pos&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;now&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='nx'&gt;begin&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;/&lt;/span&gt; &lt;span class='nx'&gt;duration&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
      &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;pos&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;=&lt;/span&gt; &lt;span class='mf'&gt;1.0&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='kc'&gt;false&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
      &lt;span class='nx'&gt;pos&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;ease&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;pos&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
      &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='o'&gt;!!&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;el&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;style&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;left&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;start&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;end&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='nx'&gt;start&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='nx'&gt;pos&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;px&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://jsbin.com/sigoq/2/edit&quot;&gt;JSBin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我们可以在jQuery的代码中看到这样的函数。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;    &lt;span class='nx'&gt;jQuery&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;easing&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='nx'&gt;linear&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;p&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;p&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
      &lt;span class='p'&gt;},&lt;/span&gt;
      &lt;span class='nx'&gt;swing&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;p&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='mf'&gt;0.5&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='nb'&gt;Math&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;cos&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;p&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='nb'&gt;Math&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;PI&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;/&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='p'&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因此，你可以往jQuery.easing里面添加easing function，使得jQuery支持新的动画速率控制方法。注意，easing function的定义域和值域必须都为[0, 1]。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;    &lt;span class='nx'&gt;jQuery&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;easing&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;myEasing&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='nx'&gt;p&lt;/span&gt; &lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='p'&gt;...&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;_3&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;本文介绍了JavaScript动画的最基本的原理。&lt;/p&gt;

&lt;p&gt;JavaScript动画实质上也是通过操作CSS去执行动画。动画的时间进程可以决定动画的效果进程。通过操作真实世界的时间进程和动画的时间进程之间的关系，我们可以将线性动画变换成非线性的动画。&lt;/p&gt;</description>
    </item>
    
    
    
    <item>
      <title>SPF团队博客风格指南</title>
      <link>http://incorporated.sendtoinc.com/2014/05/09/spf-intro/</link>
      <pubDate>Fri, 09 May 2014 00:00:00 +0000</pubDate>
      <author></author>
      <guid>http://incorporated.sendtoinc.com/2014/05/09/spf-intro</guid>
      <description>&lt;h2 id=&quot;&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;编写一篇美观、易懂的技术文章是我们共同的追求。本文将给出一些博客风格的建议，以便让大家能够更快速地熟悉我们的博客平台。&lt;/p&gt;

&lt;h2 id=&quot;_2&quot;&gt;浏览器兼容情况&lt;/h2&gt;

&lt;p&gt;为了体现高贵冷艳，我们的博客支持大部分主流的正常浏览器，以及IE9+（含IE9）。&lt;/p&gt;

&lt;h2 id=&quot;markdown&quot;&gt;使用markdown&lt;/h2&gt;

&lt;p&gt;markdown是一套优雅的文档编写格式。它允许你用纯文本创建样式，并且均有对应的相同语义的HTML标签。在我们的博客平台上，所有的博客内容均使用markdown撰写。&lt;/p&gt;

&lt;p&gt;如果你从未使用过markdown，你可以参考&lt;a href=&quot;http://publish.illinois.edu/commonsknowledge/2014/01/23/getting-started-with-markdown/&quot;&gt;这篇文章&lt;/a&gt;。markdown非常优雅、易懂，相信你会很喜欢它。&lt;/p&gt;

&lt;p&gt;在学会markdown以后，你还需要一个称手的编辑器。它需要支持markdown语法高亮，否则你在写东西的时候会非常不愉悦。谁不追求点视觉上的享受呢？如果你没有称手的编辑器，我推荐&lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;_3&quot;&gt;代码高亮&lt;/h2&gt;

&lt;p&gt;在一篇文章中让代码高亮是很简单的一件事情。Jekyll（我们用的博客引擎）采用&lt;a href=&quot;http://pygments.org/&quot;&gt;Pygments&lt;/a&gt;进行代码高亮，支持&lt;a href=&quot;http://pygments.org/languages/&quot;&gt;上百种&lt;/a&gt;代码的高亮。我们可以使用&lt;code&gt;highlight&lt;/code&gt;标签进行代码高亮。例如下面的例子里面，我们对一段ruby代码进行高亮：&lt;/p&gt;
&lt;div&gt;&lt;script src='https://gist.github.com/45555e591fc139b5f74f.js'&gt;&lt;![CDATA[]]&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;{% highlight ruby %}
    def foo
      puts 'foo'
    end
{% endhighlight %}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;p&gt;生成的效果是这样的&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;    &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;foo&lt;/span&gt;
      &lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
    &lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你要显示行号，则使用如下方式即可&lt;/p&gt;
&lt;div&gt;&lt;script src='https://gist.github.com/71a1a0870d2537367239.js'&gt;&lt;![CDATA[]]&gt;&lt;/script&gt;
&lt;noscript&gt;&lt;pre&gt;&lt;code&gt;{% highlight ruby linenos %}
    def foo
      puts 'foo'
    end
{% endhighlight %}&lt;/code&gt;&lt;/pre&gt;&lt;/noscript&gt;&lt;/div&gt;
&lt;p&gt;效果如下&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='lineno'&gt;1&lt;/span&gt;     &lt;span class='k'&gt;def&lt;/span&gt; &lt;span class='nf'&gt;foo&lt;/span&gt;
&lt;span class='lineno'&gt;2&lt;/span&gt;       &lt;span class='nb'&gt;puts&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;span class='lineno'&gt;3&lt;/span&gt;     &lt;span class='k'&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;怎样，是不是很棒？&lt;/p&gt;

&lt;h2 id=&quot;html&quot;&gt;嵌入html&lt;/h2&gt;

&lt;p&gt;在markdown文本中，可以嵌入一部分的html标签。比如我们可以插入一个不知名网站的logo做为图片：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    &lt;span class='nt'&gt;&amp;lt;img&lt;/span&gt; &lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://www.baidu.com/img/bdlogo.gif&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;alt=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果为&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='http://www.baidu.com/img/bdlogo.gif' /&gt;&lt;/p&gt;

&lt;p&gt;你可能会问，明明markdown语法中也有插入图片的语法，为什么会有需要使用html插入图片的时候呢？答案就是，你可以通过添加class为图片添加特性。例如，添加&lt;code&gt;.img-responsive&lt;/code&gt;就可以让你的图片变成响应式的图片。这些类通称为工具类。&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    &lt;span class='nt'&gt;&amp;lt;img&lt;/span&gt; &lt;span class='na'&gt;src=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;http://topic.cw.com.tw/slideshow/images/alibaba/alibaba03.jpg&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;class=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;img-responsive&amp;quot;&lt;/span&gt; &lt;span class='na'&gt;alt=&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class='nt'&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt='' class='img-responsive' src='http://topic.cw.com.tw/slideshow/images/alibaba/alibaba03.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;你可以拉伸一下浏览器窗口看看效果。还有几个有用的工具类：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.img-rounded&lt;/code&gt; 将给予图片6px的border-radius&lt;/li&gt;

&lt;li&gt;&lt;code&gt;.img-thumbnail&lt;/code&gt; 将把图片变成缩略图&lt;/li&gt;

&lt;li&gt;&lt;code&gt;.img-circle&lt;/code&gt; 将给予图片50%的border-radius（圆形）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有些html标签是不能使用的。比如&lt;code&gt;form&lt;/code&gt;标签就不能被正常解析。如果你加入了&lt;code&gt;form&lt;/code&gt;标签，在编译文章的时候，程序会给出错误。&lt;/p&gt;

&lt;h2 id=&quot;_4&quot;&gt;另起一段，而不是换行&lt;/h2&gt;

&lt;p&gt;新段和新行是两个概念。在markdown的语法中，如果你在句子的末尾加两个空格则意味着你将换行（产生新行），但是当前行和下一行还是属于一个段落；如果你在两个段落之间留出一个空行，则意味着空行上下的两段文本是属于两个段落。&lt;/p&gt;

&lt;p&gt;例如，下面的markdown代码，就是产生一个新行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是一行[空格][空格]
这是下一行&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;则对应的html代码为&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&lt;/span&gt;这是一行&lt;span class='nt'&gt;&amp;lt;br&amp;gt;&lt;/span&gt;这是下一行&lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到，两行文本是属于同一段的（在同一个&lt;code&gt;p&lt;/code&gt;标签内）。而下面的markdown代码将产生一个新段落&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;这是一行

这是下一行&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;则对应的html代码为&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='html'&gt;    &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&lt;/span&gt;这是一行&lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class='nt'&gt;&amp;lt;p&amp;gt;&lt;/span&gt;这是下一行&lt;span class='nt'&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们在博客中，总是应该采用第二种方法产生新的段落。只有这样，才能让两端之间产生一定的距离，从而易于阅读。原因请见&lt;a href=&quot;#不要段首缩进&quot;&gt;不要段首缩进&lt;/a&gt;一节。&lt;/p&gt;

&lt;p&gt;&lt;span id='不要段首缩进' /&gt;&lt;/p&gt;

&lt;h2 id=&quot;_5&quot;&gt;不要段首缩进&lt;/h2&gt;

&lt;p&gt;我们从小学到高中都在写作文，都知道每个自然段前面要空两格。但是在这里，请不要这样做。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;段首缩进&lt;/strong&gt;和&lt;strong&gt;两端之间增加段间距&lt;/strong&gt;是两种增加文章易读性的方法，它们的主要目的就是让读者的眼睛能够迅速分清段落。然而，一般而言，我们在纸面上采用段首缩进的方式。在电子屏幕上，我们应该总是使用两端之间增加段间距的方法。&lt;/p&gt;

&lt;p&gt;这也是为什么在本文前面，我提到了应该生成新段，而不是换行。因为在我们的样式表中，有这样一段代码：&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;    &lt;span class='nt'&gt;p&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;margin&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='m'&gt;0&lt;/span&gt; &lt;span class='m'&gt;0&lt;/span&gt; &lt;span class='m'&gt;1.5em&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;  &lt;span class='c'&gt;/* 每个段落有1.5em的下边距 */&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;_6&quot;&gt;其他建议&lt;/h2&gt;

&lt;p&gt;还有一部分比较细节的地方，我想有必要提一提。&lt;/p&gt;

&lt;h4 id=&quot;_7&quot;&gt;给出前言和总结&lt;/h4&gt;

&lt;p&gt;对于一篇技术文章，前言和总结是不可或缺的。一篇文章的前言会告诉读者你这篇文章的主要内容，而总结可以带领读者回顾这篇文章所写的一些内容。不仅仅是为了读者，也是为了让你自己写出更具有条理性的好文章。前言和总结不应该过长。&lt;/p&gt;

&lt;h4 id=&quot;h1&quot;&gt;少用h1&lt;/h4&gt;

&lt;p&gt;markdown语法允许我们通过一连串的井号（&lt;code&gt;#&lt;/code&gt;）分别创建对应的html标题标签。其对应关系如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Title1  -  h1
## Title2  -  h2
### Title3  -  h3
#### Title4  -  h4
##### Title5  -  h5
###### Title6  -  h6&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一山不容二虎。由于每篇文章的页面中，标题总是&lt;code&gt;h1&lt;/code&gt;，所以不建议在正文中使用&lt;code&gt;h1&lt;/code&gt;，容易造成不必要的视觉错觉，影响页面整齐度。我个人建议，在文章中只使用&lt;code&gt;h2&lt;/code&gt;（作为一级段落标题）和&lt;code&gt;h4&lt;/code&gt;（作为二级段落标题）。&lt;/p&gt;

&lt;p&gt;一般情况下，你不会用到三级段落标题。在一本书中才可能出现三级标题，而一篇出现三级标题的文章应该不会是好文章。&lt;/p&gt;

&lt;h4 id=&quot;_8&quot;&gt;勤加链接&lt;/h4&gt;

&lt;p&gt;对于文中出现的一些开源社区里面的项目名称、一些技术知识点、一些其他站点的名称等，都应该合理地加上外部链接。比如，可以链接到&lt;a href=&quot;http://wikipedia.org&quot;&gt;Wikipedia&lt;/a&gt;。这些添加外部链接的内容不是你写的这篇文章中介绍的重点，但是又是阅读这篇文章的前置知识。&lt;/p&gt;

&lt;p&gt;例如，当我在介绍开源项目&lt;a href=&quot;http://gulpjs.com&quot;&gt;gulp&lt;/a&gt;的时候，我就应该为它添加链接，指向它的主页。&lt;/p&gt;

&lt;h4 id=&quot;_9&quot;&gt;从编写易懂的段落做起&lt;/h4&gt;

&lt;p&gt;一个段落一般不应该超过200字，过长的段落会让人产生疲劳感。每个段落一般都有需要详细阐述的事情，所以段落也不应过短。超短的段落可以偶尔出现，仅用于耍酷的用途。&lt;/p&gt;

&lt;p&gt;嗯。&lt;/p&gt;

&lt;p&gt;还有就是，在一个较长的段落中，总应该有一个中心句。一般我们将中心句放在段落的开头，让读者对段落内容有个大致的了解。有时候，读者会通过中心句来判断是否要跳读。&lt;/p&gt;

&lt;h4 id=&quot;_10&quot;&gt;代码总是显示行号&lt;/h4&gt;

&lt;p&gt;为了维持一致性，我建议所有代码都加上行号（通过启用&lt;code&gt;linenos&lt;/code&gt;选项）。&lt;/p&gt;

&lt;h4 id=&quot;_11&quot;&gt;图片总是响应式的&lt;/h4&gt;

&lt;p&gt;为了维持一致性，我建议所有除了缩略图外的图片都设置为响应式的（通过设置添加&lt;code&gt;.img-responsive&lt;/code&gt;）。&lt;/p&gt;

&lt;h2 id=&quot;_12&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;本文针对博客编写风格做了一些建议。我们简单地回顾一下，你应该：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;会使用markdown撰写博客&lt;/li&gt;

&lt;li&gt;会使用代码高亮标签，并显示行号&lt;/li&gt;

&lt;li&gt;会嵌入html代码，会插入响应式图片&lt;/li&gt;

&lt;li&gt;会维护团队博客中一定的一致性&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    

  </channel> 
</rss>